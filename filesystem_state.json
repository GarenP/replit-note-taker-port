{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a 3D knowledge graph visualization application built with React and Express, inspired by the pretty-mindmap-haven library. The application displays notes as interactive 3D nodes in a force-directed graph, allowing users to explore connections between different pieces of knowledge. Users can click on nodes to view detailed note information in a preview panel. The app now features a beautiful file explorer sidebar for managing folders and notes hierarchically.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n- **July 16, 2025**: Advanced Tiptap Editor Integration with Minimalistic Design\n  - **Tiptap Editor**: Replaced basic editor with advanced WYSIWYG editor from user's note app\n    - Rich toolbar with formatting buttons (bold, italic, headers, lists, etc.)\n    - Sticky toolbar that remains visible while scrolling\n    - Light blue button styling with hover effects\n    - Proper markdown-to-HTML conversion for display and HTML-to-markdown for storage\n    - Auto-save functionality with 500ms debounce\n    - Single-view editing (no split-pane as requested)\n  - **Minimalistic Design**: Reduced excessive padding throughout interface\n    - Note preview padding reduced from px-8 py-4 to p-3\n    - Title font size reduced from 2xl to xl with tighter margins\n    - Compact badge spacing and smaller gaps\n    - Top bar height reduced with smaller buttons (h-8→h-6) and icons (h-4→h-3)\n    - Toolbar padding reduced and editor content padding optimized\n    - All formatting preserved with proper colors and spacing\n  - **Technical**: Fixed React warnings and added proper CSS styling\n\n- **July 16, 2025**: Camera Position Preservation and Improved Node Distance Control\n  - **Camera Position Fix**: Graph now preserves camera position when adjusting settings\n    - Camera position and zoom level are saved before updating graph properties\n    - Position is restored after changes, preventing unwanted zoom resets\n    - Separated node/particle size updates from graph recreation for better performance\n  - **Refined Node Distance Control**: \n    - Reduced maximum distance from 200 to 30 for much tighter node clustering\n    - Range now 5-30 with step size of 1 for precise control\n    - Default distance set to 15 for optimal initial spacing\n    - Implemented 300ms debouncing to smooth slider updates\n  - **Previous**: Gravity Control for Node Distance\n    - Added gravity/distance control slider\n    - Removed time-based growth animation per user request\n    - Focus on static visualization with adjustable node spacing\n\n- **July 15, 2025**: Final Editor Implementation - Obsidian-style Markdown Editor\n  - **ARCHITECTURAL CHANGE**: Replaced all previous editors with @uiw/react-md-editor\n    - Implemented true Obsidian-style markdown editor with live preview\n    - Removed separate edit/view modes - now always editable\n    - Split-pane editor with write and preview sections\n    - Full dark theme matching Obsidian's aesthetic\n  - **Editor Features**: Complete markdown editing experience\n    - Live preview with syntax highlighting\n    - Supports all markdown features: headers, lists, code blocks, tables\n    - Maintains wiki links [[]] and image embeds ![[]] \n    - Toolbar with formatting shortcuts\n    - Auto-saves content as you type\n  - **Previous Attempts**: \n    - Editor.js (removed - user didn't like it)\n    - BlockNote (removed - user wanted true markdown editor)\n    - Custom contentEditable solutions (abandoned)\n\n- **July 15, 2025**: Fixed note embedding functionality with ![[]] syntax\n  - **Note Embedding**: Implemented working ![[Note Title]] syntax for embedding notes\n    - Text notes are embedded with blue left border and proper indentation (no italic formatting)\n    - Image notes are embedded as clean images without borders or titles\n    - Embedded content displays the full note content inline within the parent note\n    - Simplified processing approach using direct content replacement before ReactMarkdown\n    - Fixed edit mode functionality to properly save note changes\n  - **Performance**: Maintained optimized bulk operations from previous updates\n    - Batch processing for multiple note operations\n    - Single query cache invalidation after bulk operations complete\n\n- **July 14, 2025**: Performance optimization for bulk operations\n  - **Batch Operations**: Implemented batching for bulk note creation and deletion\n    - Disabled automatic query invalidation during bulk operations\n    - Graph now only refreshes once after all operations complete\n    - Significantly reduced lag when uploading/deleting multiple notes\n  - **Optimized File Upload**: Enhanced markdown and image file processing\n    - Direct API calls instead of mutation hooks during bulk uploads\n    - Single query cache invalidation after all files processed\n    - Progress notifications maintained without triggering graph refreshes\n  - **Bulk Delete**: Improved multi-select deletion performance\n    - Direct API calls for each deletion without individual cache updates\n    - Final cache invalidation only after all deletions complete\n\n- **July 14, 2025**: Major enhancements to note preview and image support\n  - **Persistent Window Position**: Note preview window position and size are now saved to localStorage and persist across sessions\n  - **Edit/View Mode**: Implemented Obsidian-style edit and view modes for notes\n    - Toggle between modes with Edit/Eye button in the note preview header\n    - Edit mode shows a textarea with raw markdown content\n    - View mode renders formatted markdown with live preview\n  - **Image Support**: Full implementation of image storage and display\n    - Images can be uploaded through the file explorer (supports png, jpg, jpeg, gif, webp, svg)\n    - Images are stored as base64 in the database with proper MIME types\n    - Image notes display with an image icon in the file explorer\n    - Images can be embedded in notes using Obsidian's ![[image name]] syntax\n    - Embedded images display inline within notes in view mode\n    - Image embed syntax is hidden when not hovering (Obsidian-style behavior)\n  - **Database Schema Updates**: Added support for image storage\n    - Added `type` field to notes table ('text' or 'image')\n    - Added `imageData` field for base64 encoded image data\n    - Added `mimeType` field for proper image format handling\n  - **Enhanced Markdown Rendering**: Improved wiki link and image embed display\n    - Wiki links show brackets only when hovering over them\n    - Non-existing wiki links remain visible with gray styling\n    - Image embeds are processed with custom remark plugin\n\n- **July 14, 2025**: Added draggable and resizable note preview window\n  - Note preview window is now fully draggable by clicking and dragging the header\n  - Added resize handles on all corners and edges for flexible window sizing\n  - Window can be moved anywhere on the screen, including over the left panel\n  - Minimum window size constraints (300x400) to maintain usability\n  - Smooth resize and drag interactions with proper cursor indicators\n  - Window maintains position and size during navigation between notes\n  - Blue resize handles appear on hover for visual feedback\n  - Enhanced window styling with rounded corners and shadow\n  - Fixed resize anchoring so window edges stay fixed when resizing opposite edges\n  - Added complete boundary constraints to prevent window from disappearing off-screen\n  - Window now properly stays within viewport bounds during all resize and drag operations\n\n- **July 14, 2025**: Fixed wiki link functionality to work exactly like Obsidian\n  - Wiki links with [[]] syntax now work properly in all notes\n  - Fixed remark plugin to correctly process wiki links and convert them to clickable links\n  - Existing notes show as blue links without brackets (Obsidian-style)\n  - Non-existing notes show as dark gray links with brackets still visible\n  - Clicking non-existing links automatically creates new notes with that title\n  - Added proper URL encoding/decoding for note titles with spaces\n  - Enhanced CSS styling for wiki links to match Obsidian's appearance\n  - Fixed navigation history to work properly with wiki link clicks\n  - Added auto-creation functionality for missing notes when wiki links are clicked\n\n- **July 14, 2025**: Enhanced wiki link navigation and markdown formatting consistency\n  - Fixed URL encoding issues in wiki links (spaces now properly decoded)\n  - Implemented proper back/forward navigation history in note preview\n  - Added small minimalistic navigation buttons (← →) in top-left of note preview\n  - Standardized markdown formatting across all notes (proper numbered lists, line breaks)\n  - Wiki links now properly separated on individual lines for better readability\n  - Navigation history persists across wiki link clicks without resetting\n  - Fixed graph refresh button to return notes instead of 501 error\n  - All journal notes now follow consistent markdown formatting standards\n  - Implemented multi-select functionality with Ctrl+Click and Shift+Click for range selection\n  - Added bulk delete operations with confirmation dialog\n  - Created right-click context menu for file operations\n  - Added click-outside-to-deselect functionality for better user experience\n\n- **July 13, 2025**: Implemented comprehensive drag and drop functionality for file organization\n  - Added multi-select capability with Ctrl+click for selecting multiple notes and folders\n  - Implemented drag and drop for moving notes and folders between different locations\n  - Created visual feedback system with colored borders for selection and drop zones\n  - Added automatic folder expansion when items are dropped into folders\n  - Implemented root-level drop support for moving items to top level\n  - Added selection counter and user instructions for intuitive operation\n  - Fixed data persistence issues ensuring all changes are saved to PostgreSQL database\n  - Added sequential processing with delays to prevent race conditions during batch moves\n\n- **July 13, 2025**: Implemented Obsidian-style wiki links and improved file upload system\n  - Added Obsidian-style [[]] wiki link functionality with custom remark plugin\n  - Created clickable navigation between linked notes in markdown content\n  - Added visual feedback for existing vs non-existing wiki links\n  - Fixed file upload system to support multiple file selection\n  - Increased server payload limit to 50MB for large file uploads\n  - Improved upload progress feedback with sequential processing\n  - Added batch processing with delays to prevent server overload\n  - Enhanced error handling for failed file uploads\n\n- **July 13, 2025**: Major improvements to graph interaction and label display\n  - Implemented interactive node dragging with left mouse button\n  - Configured right mouse button for view rotation, middle mouse for panning\n  - Fixed blurry node titles with high-resolution canvas rendering\n  - Made node labels always visible (100% opacity) from startup\n  - Simplified graph centering to consistently center at origin\n  - Removed label threshold slider - labels now permanently visible\n  - Fixed label persistence when adjusting node size settings\n  - Added multiple centering attempts to ensure proper graph positioning\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Components**: Shadcn/UI component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **3D Visualization**: 3D Force Graph library for interactive node visualization\n- **State Management**: React Query (@tanstack/react-query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **API**: RESTful API with JSON responses\n- **Development**: Hot module replacement via Vite integration\n\n## Key Components\n\n### Data Layer\n- **Schema**: Centralized schema definition in `shared/schema.ts` using Drizzle ORM\n- **Storage**: Abstracted storage interface with in-memory implementation for development\n- **Database**: PostgreSQL with connection pooling via Neon Database\n\n### Frontend Components\n- **Graph3D**: Main 3D visualization component using Force Graph library\n- **NotePreview**: Side panel for displaying detailed note information\n- **FileExplorer**: Hierarchical file explorer sidebar for managing folders and notes\n- **UI Components**: Comprehensive set of accessible components from Shadcn/UI\n\n### Backend Services\n- **Routes**: RESTful endpoints for CRUD operations on notes\n- **Storage**: Abstract storage interface with memory-based implementation\n- **Database Migrations**: Drizzle Kit for schema management\n\n## Data Flow\n\n1. **Application Start**: React app loads and queries `/api/notes` endpoint\n2. **Data Fetching**: React Query manages server state and caching\n3. **Visualization**: Notes are transformed into 3D graph nodes with connections\n4. **User Interaction**: Clicking nodes triggers note preview display\n5. **Data Updates**: Mutations update server state and invalidate cached data\n\n## External Dependencies\n\n### Core Libraries\n- **3D Visualization**: `3d-force-graph` and `three.js` for 3D rendering\n- **Database**: `@neondatabase/serverless` for PostgreSQL connection\n- **ORM**: `drizzle-orm` for type-safe database operations\n- **Validation**: `zod` for runtime type validation\n- **UI**: Radix UI primitives for accessible components\n\n### Development Tools\n- **Build**: Vite with React plugin and TypeScript support\n- **Database**: Drizzle Kit for migrations and schema management\n- **Styling**: Tailwind CSS with PostCSS processing\n- **Development**: ESBuild for server bundling\n\n## Deployment Strategy\n\n### Build Process\n- **Client**: Vite builds React app to `dist/public`\n- **Server**: ESBuild bundles Express server to `dist/index.js`\n- **Database**: Drizzle pushes schema changes to PostgreSQL\n\n### Environment Configuration\n- **Database**: Requires `DATABASE_URL` environment variable\n- **Development**: Uses NODE_ENV for environment-specific behavior\n- **Production**: Serves static files and API from single Express server\n\n### Architecture Decisions\n\n1. **Monorepo Structure**: Single repository with shared schema between client and server\n2. **TypeScript**: Full type safety across frontend, backend, and database\n3. **Memory Storage**: Development fallback when database is unavailable\n4. **3D Visualization**: Chosen for engaging user experience and better data exploration\n5. **Serverless Database**: Neon Database for scalable, managed PostgreSQL\n6. **Component Library**: Shadcn/UI for consistent, accessible UI components","size_bytes":14901},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1953},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertNoteSchema, insertFolderSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all notes\n  app.get(\"/api/notes\", async (req, res) => {\n    try {\n      const notes = await storage.getAllNotes();\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch notes\" });\n    }\n  });\n\n  // Get note by ID\n  app.get(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid note ID\" });\n      }\n      \n      const note = await storage.getNoteById(id);\n      if (!note) {\n        return res.status(404).json({ error: \"Note not found\" });\n      }\n      \n      res.json(note);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch note\" });\n    }\n  });\n\n  // Create new note\n  app.post(\"/api/notes\", async (req, res) => {\n    try {\n      const validatedData = insertNoteSchema.parse(req.body);\n      const note = await storage.createNote(validatedData);\n      res.status(201).json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid note data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create note\" });\n      }\n    }\n  });\n\n  // Update note\n  app.put(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid note ID\" });\n      }\n      \n      const validatedData = insertNoteSchema.partial().parse(req.body);\n      const note = await storage.updateNote(id, validatedData);\n      \n      if (!note) {\n        return res.status(404).json({ error: \"Note not found\" });\n      }\n      \n      res.json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid note data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to update note\" });\n      }\n    }\n  });\n\n  // PATCH endpoint for note updates\n  app.patch(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid note ID\" });\n      }\n      \n      const validatedData = insertNoteSchema.partial().parse(req.body);\n      const note = await storage.updateNote(id, validatedData);\n      \n      if (!note) {\n        return res.status(404).json({ error: \"Note not found\" });\n      }\n      \n      res.json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid note data\", details: error.errors });\n      } else {\n        console.error('PATCH /api/notes/:id error:', error);\n        res.status(500).json({ error: \"Failed to update note\" });\n      }\n    }\n  });\n\n  // Delete note\n  app.delete(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid note ID\" });\n      }\n      \n      const success = await storage.deleteNote(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Note not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete note\" });\n    }\n  });\n\n  // Folder routes\n  app.get(\"/api/folders\", async (req, res) => {\n    try {\n      const folders = await storage.getAllFolders();\n      res.json(folders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch folders\" });\n    }\n  });\n\n  app.get(\"/api/folders/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid folder ID\" });\n      }\n      \n      const folder = await storage.getFolderById(id);\n      if (!folder) {\n        return res.status(404).json({ error: \"Folder not found\" });\n      }\n      \n      res.json(folder);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch folder\" });\n    }\n  });\n\n  app.post(\"/api/folders\", async (req, res) => {\n    try {\n      const validatedData = insertFolderSchema.parse(req.body);\n      const folder = await storage.createFolder(validatedData);\n      res.status(201).json(folder);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid folder data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create folder\" });\n      }\n    }\n  });\n\n  app.put(\"/api/folders/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid folder ID\" });\n      }\n      \n      const validatedData = insertFolderSchema.partial().parse(req.body);\n      const folder = await storage.updateFolder(id, validatedData);\n      \n      if (!folder) {\n        return res.status(404).json({ error: \"Folder not found\" });\n      }\n      \n      res.json(folder);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid folder data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to update folder\" });\n      }\n    }\n  });\n\n  // PATCH endpoint for folder updates\n  app.patch(\"/api/folders/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid folder ID\" });\n      }\n      \n      const validatedData = insertFolderSchema.partial().parse(req.body);\n      const folder = await storage.updateFolder(id, validatedData);\n      \n      if (!folder) {\n        return res.status(404).json({ error: \"Folder not found\" });\n      }\n      \n      res.json(folder);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid folder data\", details: error.errors });\n      } else {\n        console.error('PATCH /api/folders/:id error:', error);\n        res.status(500).json({ error: \"Failed to update folder\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/folders/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: \"Invalid folder ID\" });\n      }\n      \n      const success = await storage.deleteFolder(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Folder not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete folder\" });\n    }\n  });\n\n  // Generate new graph data\n  app.post(\"/api/graph/regenerate\", async (req, res) => {\n    try {\n      // For database storage, simply return all notes (no regeneration needed)\n      const notes = await storage.getAllNotes();\n      res.json(notes);\n    } catch (error) {\n      console.error('Graph regeneration error:', error);\n      res.status(500).json({ error: \"Failed to regenerate graph\" });\n    }\n  });\n\n  // Initialize sample data in database\n  app.post(\"/api/init\", async (req, res) => {\n    try {\n      // Create sample folders first\n      const sampleFolders = [\n        { name: \"Business\", parentId: null, userId: null },\n        { name: \"Psychology\", parentId: null, userId: null },\n        { name: \"Philosophy\", parentId: null, userId: null },\n      ];\n\n      const createdFolders = [];\n      for (const folderData of sampleFolders) {\n        const folder = await storage.createFolder(folderData);\n        createdFolders.push(folder);\n      }\n\n      // Create nested folders\n      const businessFolder = createdFolders[0];\n      const psychologyFolder = createdFolders[1];\n      \n      const nestedFolders = [\n        { name: \"Books\", parentId: businessFolder.id, userId: null },\n        { name: \"Strategies\", parentId: businessFolder.id, userId: null },\n        { name: \"Mindset\", parentId: psychologyFolder.id, userId: null },\n      ];\n\n      const createdNestedFolders = [];\n      for (const folderData of nestedFolders) {\n        const folder = await storage.createFolder(folderData);\n        createdNestedFolders.push(folder);\n      }\n\n      // Create sample notes\n      const sampleNotes = [\n        {\n          title: \"Rich Dad's Cash Flow Quadrant\",\n          content: \"# Rich Dad's Cash Flow Quadrant\\n\\nThe key difference between an **employee** and a **business owner** is that one works for money, while the other builds systems that generate money.\\n\\n## Key Concepts\\n- Employee mindset vs Business owner mindset\\n- Building systems that work for you\\n- Financial independence through passive income\\n\\nUnderstanding this fundamental shift in mindset is crucial for anyone looking to achieve financial independence.\",\n          tags: ['business', 'wealth', 'mindset'],\n          category: 'business',\n          folderId: createdNestedFolders[0].id, // Books folder\n          userId: null,\n          connections: []\n        },\n        {\n          title: \"Influence: The Psychology of Persuasion\",\n          content: \"# Influence: The Psychology of Persuasion\\n\\nThe principle of **social proof** states that people tend to look at others' actions to determine their own behavior, especially in uncertain situations.\\n\\n## Key Principles\\n1. Social Proof\\n2. Commitment and Consistency\\n3. Reciprocity\\n4. Authority\\n5. Liking\\n6. Scarcity\\n\\nThis powerful psychological trigger can be leveraged in marketing and leadership.\",\n          tags: ['psychology', 'marketing', 'influence'],\n          category: 'psychology',\n          folderId: createdNestedFolders[2].id, // Mindset folder\n          userId: null,\n          connections: []\n        },\n        {\n          title: \"100M Offers by Alex Hormozi\",\n          content: \"# 100M Offers\\n\\n> The better your offer, the less you need to be good at everything else in marketing and sales.\\n\\n## Grand Slam Offer Framework\\n\\n- **Value**: What you're providing\\n- **Urgency**: Why they need it now\\n- **Scarcity**: Limited availability\\n- **Guarantee**: Risk reversal\\n\\nFocus on creating irresistible value propositions that customers can't refuse.\",\n          tags: ['marketing', 'business', 'sales'],\n          category: 'business',\n          folderId: createdNestedFolders[0].id, // Books folder\n          userId: null,\n          connections: []\n        }\n      ];\n\n      const createdNotes = [];\n      for (const noteData of sampleNotes) {\n        const note = await storage.createNote(noteData);\n        createdNotes.push(note);\n      }\n\n      res.json({ \n        message: \"Sample data initialized successfully\", \n        folders: [...createdFolders, ...createdNestedFolders],\n        notes: createdNotes\n      });\n    } catch (error) {\n      console.error(\"Error initializing sample data:\", error);\n      res.status(500).json({ error: \"Failed to initialize sample data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11241},"server/storage.ts":{"content":"import { notes, folders, users, type Note, type InsertNote, type Folder, type InsertFolder, type User, type InsertUser } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getAllNotes(): Promise<Note[]>;\n  getNoteById(id: number): Promise<Note | undefined>;\n  createNote(note: InsertNote): Promise<Note>;\n  updateNote(id: number, note: Partial<InsertNote>): Promise<Note | undefined>;\n  deleteNote(id: number): Promise<boolean>;\n  getAllFolders(): Promise<Folder[]>;\n  getFolderById(id: number): Promise<Folder | undefined>;\n  createFolder(folder: InsertFolder): Promise<Folder>;\n  updateFolder(id: number, folder: Partial<InsertFolder>): Promise<Folder | undefined>;\n  deleteFolder(id: number): Promise<boolean>;\n  // User methods for OAuth preparation\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private notes: Map<number, Note>;\n  private folders: Map<number, Folder>;\n  private currentNoteId: number;\n  private currentFolderId: number;\n\n  constructor() {\n    this.notes = new Map();\n    this.folders = new Map();\n    this.currentNoteId = 1;\n    this.currentFolderId = 1;\n    this.initializeWithSampleData();\n  }\n\n  private initializeWithSampleData() {\n    // Create sample folders\n    const sampleFolders = [\n      { name: \"Business\", parentId: null },\n      { name: \"Psychology\", parentId: null },\n      { name: \"Philosophy\", parentId: null },\n      { name: \"Books\", parentId: 1 },\n      { name: \"Strategies\", parentId: 1 },\n      { name: \"Mindset\", parentId: 2 },\n    ];\n\n    sampleFolders.forEach(folderData => {\n      const folder: Folder = {\n        id: this.currentFolderId++,\n        name: folderData.name,\n        parentId: folderData.parentId,\n        created: new Date()\n      };\n      this.folders.set(folder.id, folder);\n    });\n\n    const sampleNotes = [\n      {\n        title: \"Rich Dad's Cash Flow Quadrant\",\n        content: \"The key difference between an employee and a business owner is that one works for money, while the other builds systems that generate money. Understanding this fundamental shift in mindset is crucial for anyone looking to achieve financial independence.\",\n        tags: ['business', 'wealth', 'mindset'],\n        category: 'business',\n        folderId: 4\n      },\n      {\n        title: \"Influence: The Psychology of Persuasion\",\n        content: \"The principle of social proof states that people tend to look at others' actions to determine their own behavior, especially in uncertain situations. This powerful psychological trigger can be leveraged in marketing and leadership.\",\n        tags: ['psychology', 'marketing', 'influence'],\n        category: 'psychology',\n        folderId: 6\n      },\n      {\n        title: \"100M Offers by Alex Hormozi\",\n        content: \"The grand slam offer framework: The better your offer, the less you need to be good at everything else in marketing and sales. Focus on creating irresistible value propositions that customers can't refuse.\",\n        tags: ['marketing', 'business', 'sales'],\n        category: 'business',\n        folderId: 4\n      },\n      {\n        title: \"Steal Like an Artist\",\n        content: \"Nothing is completely original. All creative work builds on what came before. Embrace influence, don't run away from it. The key is to transform your influences into something uniquely yours.\",\n        tags: ['creativity', 'art', 'mindset'],\n        category: 'art',\n        folderId: null\n      },\n      {\n        title: \"Man's Search for Meaning\",\n        content: \"Those who have a 'why' to live can bear with almost any 'how'. Success, like happiness, cannot be pursued; it must ensue from meaningful work and relationships.\",\n        tags: ['psychology', 'philosophy', 'meaning'],\n        category: 'philosophy',\n        folderId: 3\n      },\n      {\n        title: \"Finding My Virginity\",\n        content: \"Business opportunities are like buses, there's always another one coming. The key is to recognize them when they appear and have the courage to act on them.\",\n        tags: ['business', 'entrepreneurship', 'opportunities'],\n        category: 'business',\n        folderId: 1\n      },\n      {\n        title: \"The Choice Factory\",\n        content: \"Understanding behavioral science is crucial for effective marketing. People make decisions based on cognitive biases and mental shortcuts rather than rational analysis.\",\n        tags: ['psychology', 'marketing', 'behavior'],\n        category: 'psychology',\n        folderId: 2\n      },\n      {\n        title: \"Dopamine and Decision Making\",\n        content: \"Neuroscience research shows that dopamine not only rewards us for good choices but helps with decision making and risk assessment. Understanding this can improve both personal and business decisions.\",\n        tags: ['biology', 'psychology', 'neuroscience'],\n        category: 'biology',\n        folderId: 2\n      },\n      {\n        title: \"High Performance Habits\",\n        content: \"The most successful entrepreneurs maintain strict routines and habits that optimize their energy and focus throughout the day. Consistency in small actions leads to extraordinary results.\",\n        tags: ['productivity', 'habits', 'performance'],\n        category: 'psychology',\n        folderId: 6\n      },\n      {\n        title: \"Strategic Business Thinking\",\n        content: \"Effective strategy isn't about being better at the same things; it's about choosing to do different things or doing things differently. Competitive advantage comes from uniqueness, not just efficiency.\",\n        tags: ['strategy', 'business', 'competitive-advantage'],\n        category: 'business',\n        folderId: 5\n      }\n    ];\n\n    sampleNotes.forEach(noteData => {\n      const note: Note = {\n        id: this.currentNoteId++,\n        ...noteData,\n        connections: [],\n        created: new Date()\n      };\n      this.notes.set(note.id, note);\n    });\n\n    // Generate random connections between notes\n    this.generateConnections();\n    \n    // Log connection count for debugging\n    console.log(`Initialized ${this.notes.size} notes with connections on startup`);\n  }\n\n  private generateConnections() {\n    const allNotes = Array.from(this.notes.values());\n    \n    allNotes.forEach(note => {\n      const connectionCount = Math.floor(Math.random() * 3) + 1;\n      const possibleConnections = allNotes.filter(n => n.id !== note.id);\n      const connections: number[] = [];\n      \n      for (let i = 0; i < connectionCount && i < possibleConnections.length; i++) {\n        const randomNote = possibleConnections[Math.floor(Math.random() * possibleConnections.length)];\n        if (!connections.includes(randomNote.id)) {\n          connections.push(randomNote.id);\n        }\n      }\n      \n      note.connections = connections;\n      this.notes.set(note.id, note);\n    });\n  }\n\n  async getAllNotes(): Promise<Note[]> {\n    return Array.from(this.notes.values());\n  }\n\n  async getNoteById(id: number): Promise<Note | undefined> {\n    return this.notes.get(id);\n  }\n\n  async createNote(insertNote: InsertNote): Promise<Note> {\n    const note: Note = {\n      id: this.currentNoteId++,\n      title: insertNote.title,\n      content: insertNote.content,\n      tags: insertNote.tags || [],\n      category: insertNote.category,\n      folderId: insertNote.folderId || null,\n      userId: insertNote.userId || null,\n      connections: insertNote.connections || [],\n      created: new Date(),\n      updated: new Date(),\n      type: insertNote.type || 'text',\n      imageData: insertNote.imageData || null,\n      mimeType: insertNote.mimeType || null\n    };\n    this.notes.set(note.id, note);\n    return note;\n  }\n\n  async updateNote(id: number, updateData: Partial<InsertNote>): Promise<Note | undefined> {\n    const existingNote = this.notes.get(id);\n    if (!existingNote) return undefined;\n    \n    const updatedNote: Note = {\n      ...existingNote,\n      ...updateData,\n      tags: Array.isArray(updateData.tags) ? updateData.tags : existingNote.tags,\n      connections: Array.isArray(updateData.connections) ? updateData.connections : existingNote.connections\n    };\n    this.notes.set(id, updatedNote);\n    return updatedNote;\n  }\n\n  async deleteNote(id: number): Promise<boolean> {\n    return this.notes.delete(id);\n  }\n\n  async getAllFolders(): Promise<Folder[]> {\n    return Array.from(this.folders.values());\n  }\n\n  async getFolderById(id: number): Promise<Folder | undefined> {\n    return this.folders.get(id);\n  }\n\n  async createFolder(insertFolder: InsertFolder): Promise<Folder> {\n    const folder: Folder = {\n      id: this.currentFolderId++,\n      name: insertFolder.name,\n      parentId: insertFolder.parentId || null,\n      created: new Date()\n    };\n    this.folders.set(folder.id, folder);\n    return folder;\n  }\n\n  async updateFolder(id: number, updateData: Partial<InsertFolder>): Promise<Folder | undefined> {\n    const existingFolder = this.folders.get(id);\n    if (!existingFolder) return undefined;\n    \n    const updatedFolder: Folder = {\n      ...existingFolder,\n      ...updateData\n    };\n    this.folders.set(id, updatedFolder);\n    return updatedFolder;\n  }\n\n  async deleteFolder(id: number): Promise<boolean> {\n    return this.folders.delete(id);\n  }\n\n  // User methods for OAuth preparation\n  async getUser(id: number): Promise<User | undefined> {\n    // For now, return undefined as we don't have OAuth yet\n    return undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    // For now, return undefined as we don't have OAuth yet\n    return undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // For now, throw an error as we don't have OAuth yet\n    throw new Error(\"User creation not implemented in MemStorage\");\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getAllNotes(): Promise<Note[]> {\n    return await db.select().from(notes);\n  }\n\n  async getNoteById(id: number): Promise<Note | undefined> {\n    const [note] = await db.select().from(notes).where(eq(notes.id, id));\n    return note || undefined;\n  }\n\n  async createNote(insertNote: InsertNote): Promise<Note> {\n    const [note] = await db\n      .insert(notes)\n      .values(insertNote)\n      .returning();\n    return note;\n  }\n\n  async updateNote(id: number, updateData: Partial<InsertNote>): Promise<Note | undefined> {\n    const [note] = await db\n      .update(notes)\n      .set({ ...updateData, updated: new Date() })\n      .where(eq(notes.id, id))\n      .returning();\n    return note || undefined;\n  }\n\n  async deleteNote(id: number): Promise<boolean> {\n    const result = await db.delete(notes).where(eq(notes.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getAllFolders(): Promise<Folder[]> {\n    return await db.select().from(folders);\n  }\n\n  async getFolderById(id: number): Promise<Folder | undefined> {\n    const [folder] = await db.select().from(folders).where(eq(folders.id, id));\n    return folder || undefined;\n  }\n\n  async createFolder(insertFolder: InsertFolder): Promise<Folder> {\n    // Check for duplicates with the same name and parent\n    const existingFolder = await db\n      .select()\n      .from(folders)\n      .where(and(\n        eq(folders.name, insertFolder.name),\n        insertFolder.parentId \n          ? eq(folders.parentId, insertFolder.parentId)\n          : isNull(folders.parentId)\n      ));\n    \n    if (existingFolder.length > 0) {\n      throw new Error(`Folder \"${insertFolder.name}\" already exists in this location`);\n    }\n    \n    const [folder] = await db\n      .insert(folders)\n      .values(insertFolder)\n      .returning();\n    return folder;\n  }\n\n  async updateFolder(id: number, updateData: Partial<InsertFolder>): Promise<Folder | undefined> {\n    const [folder] = await db\n      .update(folders)\n      .set(updateData)\n      .where(eq(folders.id, id))\n      .returning();\n    return folder || undefined;\n  }\n\n  async deleteFolder(id: number): Promise<boolean> {\n    const result = await db.delete(folders).where(eq(folders.id, id));\n    return result.rowCount > 0;\n  }\n\n  // User methods for OAuth preparation\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":12863},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for OAuth preparation\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  username: text(\"username\").notNull().unique(),\n  name: text(\"name\"),\n  avatarUrl: text(\"avatar_url\"),\n  provider: text(\"provider\"), // 'google', 'github', etc.\n  providerId: text(\"provider_id\"), // OAuth provider's user ID\n  created: timestamp(\"created\").defaultNow().notNull(),\n  updated: timestamp(\"updated\").defaultNow().notNull(),\n});\n\nexport const folders = pgTable(\"folders\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  parentId: integer(\"parent_id\"),\n  userId: integer(\"user_id\"), // Will be required when OAuth is implemented\n  created: timestamp(\"created\").defaultNow().notNull(),\n});\n\nexport const notes = pgTable(\"notes\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(), // Store as markdown\n  tags: jsonb(\"tags\").$type<string[]>().notNull().default([]),\n  category: text(\"category\").notNull(),\n  folderId: integer(\"folder_id\"),\n  userId: integer(\"user_id\"), // Will be required when OAuth is implemented\n  connections: jsonb(\"connections\").$type<number[]>().notNull().default([]),\n  created: timestamp(\"created\").defaultNow().notNull(),\n  updated: timestamp(\"updated\").defaultNow().notNull(),\n  type: text(\"type\").notNull().default(\"text\"), // 'text' or 'image'\n  imageData: text(\"image_data\"), // Base64 encoded image data for image notes\n  mimeType: text(\"mime_type\"), // MIME type for the image\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  created: true,\n  updated: true,\n});\n\nexport const insertFolderSchema = createInsertSchema(folders).omit({\n  id: true,\n  created: true,\n});\n\nexport const insertNoteSchema = createInsertSchema(notes).omit({\n  id: true,\n  created: true,\n  updated: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertFolder = z.infer<typeof insertFolderSchema>;\nexport type Folder = typeof folders.$inferSelect;\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\nexport type Note = typeof notes.$inferSelect;\n","size_bytes":2375},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport MindmapPage from \"@/pages/mindmap\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={MindmapPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":716},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Custom colors for the mindmap */\n  --deep-space: hsl(0, 0%, 4%);\n  --space-gray: hsl(0, 0%, 10%);\n  --electric-blue: hsl(174, 62%, 55%);\n  --coral: hsl(0, 68%, 69%);\n  --purple-glow: hsl(270, 53%, 60%);\n  --mint: hsl(152, 35%, 71%);\n  --sunshine: hsl(49, 97%, 87%);\n  --rose: hsl(0, 21%, 72%);\n  --ocean: hsl(201, 67%, 61%);\n  --emerald: hsl(145, 55%, 50%);\n  --flame: hsl(6, 78%, 57%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: radial-gradient(circle at 50% 50%, var(--space-gray) 0%, var(--deep-space) 100%);\n    overflow: hidden;\n  }\n}\n\n/* Tiptap Editor Styling */\n.tiptap-editor .ProseMirror {\n  outline: none;\n  min-height: 400px;\n  padding: 0.75rem;\n}\n\n.tiptap-editor .ProseMirror h1 {\n  font-size: 1.875rem;\n  font-weight: bold;\n  color: white;\n  margin-bottom: 0.75rem;\n  margin-top: 1rem;\n}\n\n.tiptap-editor .ProseMirror h2 {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: white;\n  margin-bottom: 0.625rem;\n  margin-top: 0.875rem;\n}\n\n.tiptap-editor .ProseMirror h3 {\n  font-size: 1.25rem;\n  font-weight: bold;\n  color: white;\n  margin-bottom: 0.5rem;\n  margin-top: 0.75rem;\n}\n\n.tiptap-editor .ProseMirror p {\n  color: rgb(209, 213, 219);\n  margin-bottom: 0.75rem;\n  line-height: 1.6;\n}\n\n.tiptap-editor .ProseMirror ul,\n.tiptap-editor .ProseMirror ol {\n  color: rgb(209, 213, 219);\n  margin-bottom: 0.75rem;\n  padding-left: 1.5rem;\n}\n\n.tiptap-editor .ProseMirror li {\n  margin-bottom: 0.25rem;\n}\n\n.tiptap-editor .ProseMirror strong {\n  color: white;\n  font-weight: bold;\n}\n\n.tiptap-editor .ProseMirror em {\n  color: rgb(209, 213, 219);\n  font-style: italic;\n}\n\n.tiptap-editor .ProseMirror code {\n  background-color: rgb(55, 65, 81);\n  color: rgb(96, 165, 250);\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n  font-family: monospace;\n  font-size: 0.875rem;\n}\n\n.tiptap-editor .ProseMirror pre {\n  background-color: rgb(31, 41, 55);\n  color: rgb(209, 213, 219);\n  padding: 0.75rem;\n  border-radius: 0.5rem;\n  overflow-x: auto;\n  margin: 0.75rem 0;\n  font-family: monospace;\n  font-size: 0.875rem;\n}\n\n.tiptap-editor .ProseMirror blockquote {\n  border-left: 4px solid rgb(59, 130, 246);\n  padding-left: 0.75rem;\n  color: rgb(156, 163, 175);\n  font-style: italic;\n  margin: 0.75rem 0;\n}\n\n.tiptap-editor .ProseMirror hr {\n  border: none;\n  border-top: 1px solid rgb(75, 85, 99);\n  margin: 0.75rem 0;\n}\n\n/* Thin slider styles */\n.thin-slider [data-orientation=\"horizontal\"] {\n  height: 2px !important;\n}\n\n.thin-slider [role=\"slider\"] {\n  width: 16px !important;\n  height: 16px !important;\n}\n\n@layer components {\n  .graph-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    cursor: grab;\n  }\n\n  .graph-container:active {\n    cursor: grabbing;\n  }\n\n  .note-preview {\n    position: fixed;\n    top: 50%;\n    right: 2rem;\n    transform: translateY(-50%);\n    width: 320px;\n    max-height: 80vh;\n    background: rgba(26, 26, 26, 0.95);\n    border: 1px solid rgba(78, 205, 196, 0.3);\n    border-radius: 16px;\n    padding: 1.5rem;\n    backdrop-filter: blur(10px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.8);\n    z-index: 1000;\n    overflow-y: auto;\n  }\n\n  .glowing-text {\n    text-shadow: 0 0 10px currentColor;\n  }\n\n  .particle-bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><circle cx=\"50\" cy=\"50\" r=\"1\" fill=\"rgba(255,255,255,0.1)\"/></svg>') repeat;\n    background-size: 50px 50px;\n    animation: particle-flow 20s linear infinite;\n  }\n\n  .control-panel {\n    position: fixed;\n    bottom: 2rem;\n    left: 2rem;\n    display: flex;\n    gap: 1rem;\n    z-index: 1000;\n  }\n\n  .stats-panel {\n    position: fixed;\n    top: 2rem;\n    left: 2rem;\n    background: rgba(26, 26, 26, 0.95);\n    border: 1px solid rgba(78, 205, 196, 0.3);\n    border-radius: 12px;\n    padding: 1rem;\n    backdrop-filter: blur(10px);\n    z-index: 1000;\n    transition: left 0.3s ease;\n  }\n\n  .category-legend {\n    position: fixed;\n    top: 2rem;\n    right: 2rem;\n    background: rgba(26, 26, 26, 0.95);\n    border: 1px solid rgba(78, 205, 196, 0.3);\n    border-radius: 12px;\n    padding: 1rem;\n    backdrop-filter: blur(10px);\n    z-index: 1000;\n    max-width: 280px;\n  }\n\n  .tag-chip {\n    display: inline-block;\n    padding: 0.25rem 0.75rem;\n    border-radius: 9999px;\n    font-size: 0.75rem;\n    font-weight: 500;\n    margin: 0.125rem;\n    backdrop-filter: blur(5px);\n  }\n\n  .scrollbar-thin {\n    scrollbar-width: thin;\n    scrollbar-color: rgba(78, 205, 196, 0.3) transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar {\n    width: 4px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background-color: rgba(78, 205, 196, 0.3);\n    border-radius: 2px;\n  }\n\n  .glow-effect {\n    filter: drop-shadow(0 0 8px currentColor);\n  }\n\n  @media (max-width: 768px) {\n    .note-preview {\n      width: calc(100vw - 2rem);\n      right: 1rem;\n      top: 1rem;\n      transform: none;\n      max-height: 70vh;\n    }\n\n    .category-legend {\n      display: none;\n    }\n\n    .stats-panel {\n      top: 1rem;\n      left: 1rem;\n      padding: 0.75rem;\n    }\n  }\n}\n\n@layer utilities {\n  @keyframes pulse-glow {\n    0% { box-shadow: 0 0 20px rgba(78, 205, 196, 0.3); }\n    100% { box-shadow: 0 0 30px rgba(78, 205, 196, 0.8); }\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  @keyframes particle-flow {\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(100%); }\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .animate-particle-flow {\n    animation: particle-flow 2s linear infinite;\n  }\n\n  .animate-spin {\n    animation: spin 1s linear infinite;\n  }\n  \n  /* Obsidian-style markdown rendering */\n  .prose-obsidian h1 {\n    @apply border-b border-gray-700 pb-2;\n  }\n  \n  .prose-obsidian ul > li::marker {\n    color: var(--electric-blue);\n  }\n  \n  .prose-obsidian ol > li::marker {\n    color: var(--electric-blue);\n    font-weight: 600;\n  }\n  \n  /* Wiki link styles */\n  .wiki-link {\n    @apply inline-flex items-center px-1.5 py-0.5 rounded-sm cursor-pointer transition-all;\n    text-decoration: none !important;\n    margin: 0 1px;\n  }\n  \n  .wiki-link-exists {\n    @apply text-blue-400 hover:text-blue-300;\n    background-color: rgba(59, 130, 246, 0.15);\n  }\n  \n  .wiki-link-exists:hover {\n    background-color: rgba(59, 130, 246, 0.25);\n  }\n  \n  .wiki-link-missing {\n    @apply text-gray-500;\n    background-color: rgba(156, 163, 175, 0.15);\n  }\n  \n  .wiki-link-missing:hover {\n    background-color: rgba(156, 163, 175, 0.25);\n  }\n  \n  /* Image embed link styles */\n  .image-embed-link {\n    @apply inline-flex items-center px-1.5 py-0.5 rounded-sm cursor-pointer transition-all;\n    text-decoration: none !important;\n    margin: 0 1px;\n  }\n  \n  /* Note embed link styles */\n  .note-embed-link {\n    @apply inline-flex items-center px-1.5 py-0.5 rounded-sm cursor-pointer transition-all;\n    text-decoration: none !important;\n    margin: 0 1px;\n  }\n  \n  /* Hide wiki link brackets when not hovering in view mode */\n  .prose-obsidian:not(:hover) .wiki-link-hover-hide.wiki-link-missing {\n    color: transparent;\n    position: relative;\n  }\n  \n  .prose-obsidian:not(:hover) .wiki-link-hover-hide.wiki-link-missing::after {\n    content: attr(data-title);\n    position: absolute;\n    left: 0;\n    color: rgb(156, 163, 175);\n  }\n  \n  /* Obsidian-style Markdown Editor Styles */\n  .obsidian-editor {\n    background: rgb(31, 41, 55);\n    border-radius: 8px;\n    padding: 1rem;\n    height: 100%;\n  }\n  \n  /* MDEditor Dark Theme Override */\n  .w-md-editor.w-md-editor-dark {\n    background-color: rgb(30, 30, 30);\n    color: rgb(220, 220, 220);\n  }\n  \n  .w-md-editor-toolbar {\n    background-color: rgb(30, 30, 30);\n    border-bottom: 1px solid rgb(60, 60, 60);\n  }\n  \n  .w-md-editor-toolbar button {\n    color: rgb(220, 220, 220);\n  }\n  \n  .w-md-editor-toolbar button:hover {\n    background-color: rgb(45, 45, 45);\n  }\n  \n  .w-md-editor-toolbar button.active {\n    background-color: rgb(60, 60, 60);\n  }\n  \n  .w-md-editor-content {\n    background-color: rgb(30, 30, 30);\n  }\n  \n  .w-md-editor-text-pre,\n  .w-md-editor-text-input,\n  .w-md-editor-text {\n    background-color: rgb(30, 30, 30) !important;\n    color: rgb(220, 220, 220) !important;\n    font-family: 'Inter', var(--font-sans);\n    font-size: 14px;\n    line-height: 1.6;\n  }\n  \n  .w-md-editor-preview {\n    background-color: rgb(30, 30, 30);\n    color: rgb(220, 220, 220);\n    padding: 16px;\n  }\n  \n  /* Preview Styles - Obsidian Theme */\n  .w-md-editor-preview h1 {\n    color: white;\n    font-size: 2em;\n    font-weight: 600;\n    margin: 0.67em 0;\n    border-bottom: 1px solid rgb(60, 60, 60);\n    padding-bottom: 0.3em;\n  }\n  \n  .w-md-editor-preview h2 {\n    color: white;\n    font-size: 1.5em;\n    font-weight: 600;\n    margin: 0.75em 0;\n  }\n  \n  .w-md-editor-preview h3 {\n    color: white;\n    font-size: 1.25em;\n    font-weight: 600;\n    margin: 1em 0;\n  }\n  \n  .w-md-editor-preview code {\n    background-color: rgb(45, 45, 45);\n    color: rgb(220, 220, 220);\n    padding: 2px 4px;\n    border-radius: 3px;\n    font-family: 'JetBrains Mono', monospace;\n    font-size: 0.9em;\n  }\n  \n  .w-md-editor-preview pre {\n    background-color: rgb(45, 45, 45);\n    border-radius: 6px;\n    padding: 12px;\n    overflow-x: auto;\n  }\n  \n  .w-md-editor-preview pre code {\n    background-color: transparent;\n    padding: 0;\n  }\n  \n  .w-md-editor-preview blockquote {\n    border-left: 4px solid hsl(200, 100%, 50%);\n    padding-left: 16px;\n    color: rgb(180, 180, 180);\n    font-style: italic;\n    margin: 16px 0;\n  }\n  \n  .w-md-editor-preview ul,\n  .w-md-editor-preview ol {\n    padding-left: 1.5em;\n    margin: 1em 0;\n  }\n  \n  .w-md-editor-preview li {\n    margin: 0.25em 0;\n  }\n  \n  .w-md-editor-preview input[type=\"checkbox\"] {\n    accent-color: hsl(200, 100%, 50%);\n    margin-right: 0.5em;\n  }\n  \n  .w-md-editor-preview a {\n    color: hsl(200, 100%, 50%);\n    text-decoration: none;\n  }\n  \n  .w-md-editor-preview a:hover {\n    text-decoration: underline;\n  }\n  \n  /* Wiki link styles */\n  .wiki-link {\n    color: hsl(200, 100%, 50%);\n    cursor: pointer;\n    text-decoration: underline;\n  }\n  \n  .wiki-link:hover {\n    opacity: 0.8;\n  }\n  \n  .wiki-link-missing {\n    color: rgb(107, 114, 128);\n  }\n}\n","size_bytes":12250},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/FileExplorer.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { ChevronRight, ChevronDown, FolderPlus, FilePlus, Folder, FileText, MoreVertical, Edit3, Trash2, Upload, AlertTriangle, Move, Image } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Folder as FolderType, Note, InsertFolder, InsertNote } from '@shared/schema';\n\ninterface FileExplorerProps {\n  onNoteSelect: (note: Note) => void;\n  selectedNote?: Note | null;\n}\n\ninterface TreeNode {\n  id: number;\n  name: string;\n  type: 'folder' | 'note';\n  parentId: number | null;\n  children: TreeNode[];\n  data: FolderType | Note;\n}\n\nexport function FileExplorer({ onNoteSelect, selectedNote }: FileExplorerProps) {\n  const [expandedFolders, setExpandedFolders] = useState<Set<number>>(new Set([1, 2, 3]));\n  const [newFolderName, setNewFolderName] = useState('');\n  const [newNoteName, setNewNoteName] = useState('');\n  const [editingId, setEditingId] = useState<number | null>(null);\n  const [editingName, setEditingName] = useState('');\n  const [createFolderParent, setCreateFolderParent] = useState<number | null>(null);\n  const [createNoteParent, setCreateNoteParent] = useState<number | null>(null);\n  const [duplicateCheck, setDuplicateCheck] = useState<{\n    show: boolean;\n    duplicates: { file: File; content: string; existingNote: Note }[];\n    newFiles: { file: File; content: string }[];\n  }>({\n    show: false,\n    duplicates: [],\n    newFiles: []\n  });\n  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());\n  const [lastSelectedItem, setLastSelectedItem] = useState<string | null>(null);\n  const [draggedItems, setDraggedItems] = useState<Set<string>>(new Set());\n  const [dragOver, setDragOver] = useState<string | null>(null);\n  const [deleteConfirmation, setDeleteConfirmation] = useState<{\n    show: boolean;\n    items: string[];\n  }>({\n    show: false,\n    items: []\n  });\n  const [contextMenu, setContextMenu] = useState<{\n    show: boolean;\n    x: number;\n    y: number;\n    node: TreeNode | null;\n  }>({\n    show: false,\n    x: 0,\n    y: 0,\n    node: null\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const explorerRef = useRef<HTMLDivElement>(null);\n  const flatItemsRef = useRef<{ id: string; element: HTMLElement; node: TreeNode }[]>([]);\n\n  const { data: folders = [] } = useQuery<FolderType[]>({\n    queryKey: ['/api/folders'],\n  });\n\n  const { data: notes = [] } = useQuery<Note[]>({\n    queryKey: ['/api/notes'],\n  });\n\n  const createFolderMutation = useMutation({\n    mutationFn: async (data: InsertFolder) => {\n      const response = await apiRequest('POST', '/api/folders', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/folders'] });\n      setNewFolderName('');\n      setCreateFolderParent(null);\n      toast({ title: \"Folder created successfully!\" });\n    },\n    onError: (error: any) => {\n      console.error('Create folder error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create folder. Please try again.\",\n      });\n    }\n  });\n\n  const createNoteMutation = useMutation({\n    mutationFn: async (data: InsertNote) => {\n      const response = await apiRequest('POST', '/api/notes', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Don't invalidate queries here - will be done in batch\n      setNewNoteName('');\n      setCreateNoteParent(null);\n      toast({ title: \"Note created successfully!\" });\n    },\n  });\n\n  const updateFolderMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertFolder> }) => {\n      return await apiRequest('PATCH', `/api/folders/${id}`, data);\n    },\n    onSuccess: (_, { data }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/folders'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      setEditingId(null);\n      setEditingName('');\n      \n      // Auto-expand the target folder if it's a parent change\n      if (data.parentId !== undefined && data.parentId !== null) {\n        setExpandedFolders(prev => new Set([...prev, data.parentId!]));\n      }\n      \n      toast({ title: \"Folder updated successfully!\" });\n    },\n    onError: (error) => {\n      console.error('Update folder error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update folder. Please try again.\",\n      });\n    }\n  });\n\n  const updateNoteMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertNote> }) => {\n      const response = await apiRequest('PATCH', `/api/notes/${id}`, data);\n      return response;\n    },\n    onSuccess: (_, { data }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      setEditingId(null);\n      setEditingName('');\n      \n      // Auto-expand the target folder if it's a folder change\n      if (data.folderId !== undefined && data.folderId !== null) {\n        setExpandedFolders(prev => new Set([...prev, data.folderId!]));\n      }\n      \n      toast({ title: \"Note updated successfully!\" });\n    },\n    onError: (error) => {\n      console.error('Update note error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update note. Please try again.\",\n      });\n    }\n  });\n\n  const deleteFolderMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest('DELETE', `/api/folders/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/folders'] });\n      toast({ title: \"Folder deleted successfully!\" });\n    },\n  });\n\n  const deleteNoteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest('DELETE', `/api/notes/${id}`);\n    },\n    onSuccess: () => {\n      // Don't invalidate queries here - will be done in batch\n      toast({ title: \"Note deleted successfully!\" });\n    },\n  });\n\n  const buildTree = (): TreeNode[] => {\n    const nodeMap = new Map<string, TreeNode>();\n    \n    // Add folders to map with string keys to avoid ID conflicts\n    folders.forEach(folder => {\n      nodeMap.set(`folder-${folder.id}`, {\n        id: folder.id,\n        name: folder.name,\n        type: 'folder',\n        parentId: folder.parentId,\n        children: [],\n        data: folder\n      });\n    });\n\n    // Add notes to map with string keys to avoid ID conflicts\n    notes.forEach(note => {\n      nodeMap.set(`note-${note.id}`, {\n        id: note.id,\n        name: note.title,\n        type: 'note',\n        parentId: note.folderId,\n        children: [],\n        data: note\n      });\n    });\n\n    // Build tree structure\n    const rootNodes: TreeNode[] = [];\n    \n    nodeMap.forEach(node => {\n      if (node.parentId === null) {\n        rootNodes.push(node);\n      } else {\n        // Find parent folder\n        const parent = nodeMap.get(`folder-${node.parentId}`);\n        if (parent) {\n          parent.children.push(node);\n        } else {\n          // If parent folder doesn't exist, add to root\n          console.warn(`Parent folder ${node.parentId} not found for ${node.type} ${node.name}`);\n          rootNodes.push(node);\n        }\n      }\n    });\n\n    // Sort children\n    const sortChildren = (nodes: TreeNode[]) => {\n      nodes.sort((a, b) => {\n        if (a.type !== b.type) {\n          return a.type === 'folder' ? -1 : 1; // Folders first\n        }\n        return a.name.localeCompare(b.name);\n      });\n      nodes.forEach(node => sortChildren(node.children));\n    };\n\n    sortChildren(rootNodes);\n    return rootNodes;\n  };\n\n  const toggleFolder = (folderId: number) => {\n    setExpandedFolders(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(folderId)) {\n        newSet.delete(folderId);\n      } else {\n        newSet.add(folderId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleCreateFolder = () => {\n    if (newFolderName.trim()) {\n      createFolderMutation.mutate({\n        name: newFolderName.trim(),\n        parentId: createFolderParent === 0 ? null : createFolderParent,\n        userId: null // Will be set to actual user ID when OAuth is implemented\n      });\n    }\n  };\n\n  const handleCreateNote = () => {\n    if (newNoteName.trim()) {\n      createNoteMutation.mutate({\n        title: newNoteName.trim(),\n        content: '# ' + newNoteName.trim() + '\\n\\nYour content here...', // Default markdown content\n        category: 'general',\n        tags: [],\n        folderId: createNoteParent === 0 ? null : createNoteParent,\n        userId: null, // Will be set to actual user ID when OAuth is implemented\n        connections: []\n      });\n    }\n  };\n\n  const handleImport = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const mdFiles = files.filter(file => file.name.endsWith('.md'));\n    const imageFiles = files.filter(file => \n      file.type.startsWith('image/') || \n      ['.png', '.jpg', '.jpeg', '.gif', '.webp', '.svg'].some(ext => file.name.toLowerCase().endsWith(ext))\n    );\n    \n    if (mdFiles.length === 0 && imageFiles.length === 0) {\n      toast({ \n        title: \"No supported files found\", \n        description: \"Please select .md files or images\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Process images first\n    if (imageFiles.length > 0) {\n      await processImageFiles(imageFiles);\n    }\n\n    // Then process markdown files\n    if (mdFiles.length > 0) {\n      await processMarkdownFiles(mdFiles);\n    }\n\n    // Reset the input\n    event.target.value = '';\n  };\n\n  const processImageFiles = async (imageFiles: File[]) => {\n    toast({ \n      title: \"Uploading images...\", \n      description: `Processing ${imageFiles.length} image files`\n    });\n\n    let processedCount = 0;\n    const totalFiles = imageFiles.length;\n\n    // Disable automatic query invalidation during bulk upload\n    queryClient.setQueryDefaults(['/api/notes'], { refetchOnWindowFocus: false });\n\n    for (const file of imageFiles) {\n      try {\n        // Read file as base64\n        const base64 = await new Promise<string>((resolve) => {\n          const reader = new FileReader();\n          reader.onload = (e) => {\n            const result = e.target?.result as string;\n            // Extract base64 data (remove data:image/...;base64, prefix)\n            const base64Data = result.split(',')[1];\n            resolve(base64Data);\n          };\n          reader.readAsDataURL(file);\n        });\n\n        // Create image note using direct API call\n        await apiRequest('POST', '/api/notes', {\n          title: file.name,\n          content: `![${file.name}](image)`, // Placeholder content\n          category: 'image',\n          tags: ['image', 'imported'],\n          folderId: null,\n          userId: null,\n          connections: [],\n          type: 'image',\n          imageData: base64,\n          mimeType: file.type || 'image/png'\n        });\n\n        processedCount++;\n        \n        if (processedCount % 5 === 0 || processedCount === totalFiles) {\n          toast({ \n            title: `Progress: ${processedCount}/${totalFiles}`, \n            description: `Successfully uploaded ${processedCount} images`\n          });\n        }\n\n        if (processedCount < totalFiles) {\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      } catch (error) {\n        console.error(`Failed to process image ${file.name}:`, error);\n        toast({ \n          title: \"Upload error\", \n          description: `Failed to upload ${file.name}`,\n          variant: \"destructive\"\n        });\n      }\n    }\n\n    // Re-enable automatic query invalidation\n    queryClient.setQueryDefaults(['/api/notes'], { refetchOnWindowFocus: true });\n    \n    // Invalidate queries once after all uploads\n    queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n\n    toast({ \n      title: \"Image upload completed!\", \n      description: `Successfully processed ${processedCount} out of ${totalFiles} images`\n    });\n  };\n\n  const processMarkdownFiles = async (mdFiles: File[]) => {\n    if (mdFiles.length === 0) return;\n\n    toast({ \n      title: \"Checking for duplicates...\", \n      description: `Analyzing ${mdFiles.length} markdown files`\n    });\n\n    // Read all files and check for duplicates\n    const fileContents = await Promise.all(\n      mdFiles.map(async (file) => {\n        const content = await new Promise<string>((resolve) => {\n          const reader = new FileReader();\n          reader.onload = (e) => resolve(e.target?.result as string);\n          reader.readAsText(file);\n        });\n        return { file, content };\n      })\n    );\n\n    // Check for duplicates\n    const duplicates: { file: File; content: string; existingNote: Note }[] = [];\n    const newFiles: { file: File; content: string }[] = [];\n\n    fileContents.forEach(({ file, content }) => {\n      const title = file.name.replace('.md', '');\n      const existingNote = notes.find(note => note.title.toLowerCase() === title.toLowerCase());\n      \n      if (existingNote) {\n        duplicates.push({ file, content, existingNote });\n      } else {\n        newFiles.push({ file, content });\n      }\n    });\n\n    if (duplicates.length > 0) {\n      // Show duplicate confirmation dialog\n      setDuplicateCheck({\n        show: true,\n        duplicates,\n        newFiles\n      });\n    } else {\n      // No duplicates, proceed with upload\n      await processFiles(newFiles);\n    }\n  };\n\n  const processFiles = async (filesToProcess: { file: File; content: string }[]) => {\n    if (filesToProcess.length === 0) {\n      toast({ \n        title: \"No files to process\", \n        description: \"All files were skipped\"\n      });\n      return;\n    }\n\n    toast({ \n      title: \"Uploading files...\", \n      description: `Processing ${filesToProcess.length} markdown files`\n    });\n\n    let processedCount = 0;\n    const totalFiles = filesToProcess.length;\n\n    // Disable automatic query invalidation during bulk upload\n    queryClient.setQueryDefaults(['/api/notes'], { refetchOnWindowFocus: false });\n\n    for (const { file, content } of filesToProcess) {\n      try {\n        const title = file.name.replace('.md', '');\n        \n        await apiRequest('POST', '/api/notes', {\n          title,\n          content,\n          category: 'imported',\n          tags: ['imported'],\n          folderId: null,\n          userId: null,\n          connections: []\n        });\n\n        processedCount++;\n        \n        if (processedCount % 5 === 0 || processedCount === totalFiles) {\n          toast({ \n            title: `Progress: ${processedCount}/${totalFiles}`, \n            description: `Successfully uploaded ${processedCount} files`\n          });\n        }\n\n        if (processedCount < totalFiles) {\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      } catch (error) {\n        console.error(`Failed to process file ${file.name}:`, error);\n        toast({ \n          title: \"Upload error\", \n          description: `Failed to upload ${file.name}`,\n          variant: \"destructive\"\n        });\n      }\n    }\n\n    // Re-enable automatic query invalidation\n    queryClient.setQueryDefaults(['/api/notes'], { refetchOnWindowFocus: true });\n    \n    // Invalidate queries once after all uploads\n    queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n\n    toast({ \n      title: \"Upload completed!\", \n      description: `Successfully processed ${processedCount} out of ${totalFiles} files`\n    });\n  };\n\n  const handleOverwriteAll = async () => {\n    const allFiles = [...duplicateCheck.newFiles, ...duplicateCheck.duplicates];\n    \n    // First, update/overwrite existing notes\n    for (const { file, content, existingNote } of duplicateCheck.duplicates) {\n      try {\n        await new Promise<void>((resolve, reject) => {\n          updateNoteMutation.mutate({\n            id: existingNote.id,\n            data: { content }\n          }, {\n            onSuccess: () => resolve(),\n            onError: (error) => reject(error)\n          });\n        });\n      } catch (error) {\n        console.error(`Failed to update ${file.name}:`, error);\n      }\n    }\n    \n    // Then process new files\n    await processFiles(duplicateCheck.newFiles);\n    \n    setDuplicateCheck({ show: false, duplicates: [], newFiles: [] });\n  };\n\n  const handleSkipDuplicates = async () => {\n    await processFiles(duplicateCheck.newFiles);\n    setDuplicateCheck({ show: false, duplicates: [], newFiles: [] });\n  };\n\n  const handleCancel = () => {\n    setDuplicateCheck({ show: false, duplicates: [], newFiles: [] });\n  };\n\n  // Helper function to create unique item IDs\n  const getItemId = (node: TreeNode) => {\n    return `${node.type}-${node.id}`;\n  };\n\n  // Handle item selection\n  const handleItemClick = (node: TreeNode, event: React.MouseEvent) => {\n    const itemId = getItemId(node);\n    \n    if (event.ctrlKey || event.metaKey) {\n      // Multi-select with Ctrl/Cmd\n      setSelectedItems(prev => {\n        const newSet = new Set(prev);\n        if (newSet.has(itemId)) {\n          newSet.delete(itemId);\n        } else {\n          newSet.add(itemId);\n        }\n        return newSet;\n      });\n      setLastSelectedItem(itemId);\n    } else if (event.shiftKey && lastSelectedItem) {\n      // Range select with Shift\n      const startIndex = flatItemsRef.current.findIndex(item => item.id === lastSelectedItem);\n      const endIndex = flatItemsRef.current.findIndex(item => item.id === itemId);\n      \n      if (startIndex !== -1 && endIndex !== -1) {\n        const [minIndex, maxIndex] = startIndex < endIndex ? [startIndex, endIndex] : [endIndex, startIndex];\n        const rangeItems = flatItemsRef.current.slice(minIndex, maxIndex + 1).map(item => item.id);\n        setSelectedItems(prev => new Set([...prev, ...rangeItems]));\n      }\n    } else {\n      // Single select\n      setSelectedItems(new Set([itemId]));\n      setLastSelectedItem(itemId);\n    }\n  };\n\n  // Handle click outside to deselect\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (explorerRef.current && !explorerRef.current.contains(event.target as Node)) {\n        setSelectedItems(new Set());\n        setLastSelectedItem(null);\n      }\n      // Close context menu\n      setContextMenu({ show: false, x: 0, y: 0, node: null });\n    };\n\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, []);\n\n  // Handle click on empty space within the panel to deselect\n  const handlePanelClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      setSelectedItems(new Set());\n      setLastSelectedItem(null);\n    }\n    setContextMenu({ show: false, x: 0, y: 0, node: null });\n  };\n\n  // Handle drag start\n  const handleDragStart = (event: React.DragEvent, node: TreeNode) => {\n    const itemId = getItemId(node);\n    \n    // If the dragged item is not selected, select it\n    if (!selectedItems.has(itemId)) {\n      setSelectedItems(new Set([itemId]));\n      setDraggedItems(new Set([itemId]));\n    } else {\n      setDraggedItems(new Set(selectedItems));\n    }\n    \n    // Set drag data\n    event.dataTransfer.setData('text/plain', JSON.stringify({\n      type: 'file-explorer-items',\n      items: Array.from(selectedItems.has(itemId) ? selectedItems : [itemId])\n    }));\n    \n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  // Handle drag over\n  const handleDragOver = (event: React.DragEvent, node: TreeNode) => {\n    event.preventDefault();\n    if (node.type === 'folder') {\n      setDragOver(getItemId(node));\n    }\n  };\n\n  // Handle drag leave\n  const handleDragLeave = () => {\n    setDragOver(null);\n  };\n\n  // Handle drop\n  const handleDrop = (event: React.DragEvent, targetNode: TreeNode) => {\n    event.preventDefault();\n    \n    try {\n      const dragData = JSON.parse(event.dataTransfer.getData('text/plain'));\n      \n      if (dragData.type === 'file-explorer-items' && targetNode.type === 'folder') {\n        const targetFolderId = targetNode.id;\n        \n        // Auto-expand the target folder to show the moved items\n        setExpandedFolders(prev => new Set([...prev, targetFolderId]));\n        \n        // Move each dragged item with a small delay to prevent race conditions\n        dragData.items.forEach((itemId: string, index: number) => {\n          setTimeout(() => {\n            const [type, id] = itemId.split('-');\n            const itemIdNum = parseInt(id);\n            \n            if (type === 'folder') {\n              // Update folder parent\n              updateFolderMutation.mutate({\n                id: itemIdNum,\n                data: { parentId: targetFolderId }\n              });\n            } else if (type === 'note') {\n              // Update note folder\n              updateNoteMutation.mutate({\n                id: itemIdNum,\n                data: { folderId: targetFolderId }\n              });\n            }\n          }, index * 100); // 100ms delay between each item\n        });\n        \n        toast({\n          title: \"Items moved\",\n          description: `Successfully moved ${dragData.items.length} item(s) to ${targetNode.name}`\n        });\n      }\n    } catch (error) {\n      console.error('Drop error:', error);\n    }\n    \n    setDragOver(null);\n    setDraggedItems(new Set());\n    setSelectedItems(new Set());\n  };\n\n  const handleEdit = (node: TreeNode) => {\n    setEditingId(node.type === 'folder' ? node.id : (node.data as Note).id);\n    setEditingName(node.name);\n  };\n\n  const handleSaveEdit = (node: TreeNode) => {\n    if (editingName.trim()) {\n      if (node.type === 'folder') {\n        updateFolderMutation.mutate({\n          id: node.id,\n          data: { name: editingName.trim() }\n        });\n      } else {\n        updateNoteMutation.mutate({\n          id: (node.data as Note).id,\n          data: { title: editingName.trim() }\n        });\n      }\n    }\n  };\n\n  const handleDelete = (node: TreeNode) => {\n    if (selectedItems.size > 1 && selectedItems.has(getItemId(node))) {\n      // Delete multiple selected items\n      setDeleteConfirmation({\n        show: true,\n        items: Array.from(selectedItems)\n      });\n    } else {\n      // Delete single item\n      if (node.type === 'folder') {\n        deleteFolderMutation.mutate(node.id);\n      } else {\n        deleteNoteMutation.mutate((node.data as Note).id);\n      }\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    const items = deleteConfirmation.items;\n    let folderCount = 0;\n    let noteCount = 0;\n\n    // Disable automatic query invalidation during bulk operations\n    queryClient.setQueryDefaults(['/api/notes'], { refetchOnWindowFocus: false });\n    queryClient.setQueryDefaults(['/api/folders'], { refetchOnWindowFocus: false });\n\n    for (const itemId of items) {\n      const [type, id] = itemId.split('-');\n      const numId = parseInt(id);\n\n      try {\n        if (type === 'folder') {\n          folderCount++;\n          await apiRequest('DELETE', `/api/folders/${numId}`);\n        } else if (type === 'note') {\n          noteCount++;\n          await apiRequest('DELETE', `/api/notes/${numId}`);\n        }\n        // Add small delay between deletions to prevent overwhelming the server\n        await new Promise(resolve => setTimeout(resolve, 100));\n      } catch (error) {\n        console.error(`Failed to delete ${itemId}:`, error);\n      }\n    }\n\n    // Re-enable automatic query invalidation\n    queryClient.setQueryDefaults(['/api/notes'], { refetchOnWindowFocus: true });\n    queryClient.setQueryDefaults(['/api/folders'], { refetchOnWindowFocus: true });\n\n    // Invalidate queries once after all deletions\n    queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n    queryClient.invalidateQueries({ queryKey: ['/api/folders'] });\n\n    setSelectedItems(new Set());\n    setLastSelectedItem(null);\n    setDeleteConfirmation({ show: false, items: [] });\n    \n    toast({\n      title: \"Bulk delete completed\",\n      description: `Deleted ${folderCount} folders and ${noteCount} notes`\n    });\n  };\n\n  const renderNode = (node: TreeNode, depth: number = 0) => {\n    const isExpanded = expandedFolders.has(node.id);\n    const isSelected = selectedNote && node.type === 'note' && (node.data as Note).id === selectedNote.id;\n    const isEditing = editingId === (node.type === 'folder' ? node.id : (node.data as Note).id);\n    const itemId = getItemId(node);\n    const isItemSelected = selectedItems.has(itemId);\n    const isDraggedOver = dragOver === itemId;\n\n    return (\n      <div key={itemId} className=\"select-none\">\n        <div\n          ref={(el) => {\n            if (el) {\n              flatItemsRef.current = flatItemsRef.current.filter(item => item.id !== itemId);\n              flatItemsRef.current.push({ id: itemId, element: el, node });\n            }\n          }}\n          className={`group flex items-center py-1 px-2 rounded-md cursor-pointer transition-colors ${\n            isSelected ? 'bg-[var(--electric-blue)]/20 border-l-2 border-[var(--electric-blue)]' : ''\n          } ${\n            isItemSelected ? 'bg-yellow-500/20 border-l-2 border-yellow-500' : ''\n          } ${\n            isDraggedOver ? 'bg-green-500/20 border-2 border-green-500' : ''\n          } ${\n            !isSelected && !isItemSelected && !isDraggedOver ? 'hover:bg-gray-800/50' : ''\n          }`}\n          style={{ paddingLeft: `${depth * 16 + 8}px` }}\n          onClick={(e) => {\n            e.stopPropagation();\n            if (e.ctrlKey || e.metaKey || e.shiftKey) {\n              handleItemClick(node, e);\n            } else {\n              handleItemClick(node, e);\n              if (node.type === 'folder') {\n                toggleFolder(node.id);\n              } else {\n                onNoteSelect(node.data as Note);\n              }\n            }\n          }}\n          onContextMenu={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            // If this item is not selected, select it first\n            if (!selectedItems.has(itemId)) {\n              setSelectedItems(new Set([itemId]));\n              setLastSelectedItem(itemId);\n            }\n            setContextMenu({\n              show: true,\n              x: e.clientX,\n              y: e.clientY,\n              node: node\n            });\n          }}\n          draggable={true}\n          onDragStart={(e) => {\n            e.stopPropagation();\n            handleDragStart(e, node);\n          }}\n          onDragOver={(e) => {\n            e.stopPropagation();\n            handleDragOver(e, node);\n          }}\n          onDragLeave={(e) => {\n            e.stopPropagation();\n            handleDragLeave();\n          }}\n          onDrop={(e) => {\n            e.stopPropagation();\n            handleDrop(e, node);\n          }}\n        >\n          {node.type === 'folder' && (\n            <div className=\"mr-1 text-gray-400\">\n              {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\n            </div>\n          )}\n          \n          <div className=\"mr-2 text-gray-400\">\n            {node.type === 'folder' ? (\n              <Folder size={16} />\n            ) : (\n              (node.data as Note).type === 'image' ? <Image size={16} /> : <FileText size={16} />\n            )}\n          </div>\n\n          {isEditing ? (\n            <Input\n              value={editingName}\n              onChange={(e) => setEditingName(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  handleSaveEdit(node);\n                } else if (e.key === 'Escape') {\n                  setEditingId(null);\n                  setEditingName('');\n                }\n              }}\n              onBlur={() => handleSaveEdit(node)}\n              className=\"flex-1 h-6 px-2 text-sm bg-gray-800 border-gray-600 text-white\"\n              autoFocus\n            />\n          ) : (\n            <span className=\"flex-1 text-sm text-gray-300 truncate\">{node.name}</span>\n          )}\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 hover:bg-gray-700 text-gray-300\">\n                <MoreVertical size={12} />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"bg-gray-800 border-gray-700\">\n              <DropdownMenuItem\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleEdit(node);\n                }}\n                className=\"text-gray-300 hover:bg-gray-700\"\n              >\n                <Edit3 size={14} className=\"mr-2\" />\n                Rename\n              </DropdownMenuItem>\n              {node.type === 'folder' && (\n                <>\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setCreateFolderParent(node.id);\n                    }}\n                    className=\"text-gray-300 hover:bg-gray-700\"\n                  >\n                    <FolderPlus size={14} className=\"mr-2\" />\n                    New Folder\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setCreateNoteParent(node.id);\n                    }}\n                    className=\"text-gray-300 hover:bg-gray-700\"\n                  >\n                    <FilePlus size={14} className=\"mr-2\" />\n                    New Note\n                  </DropdownMenuItem>\n                </>\n              )}\n              <DropdownMenuItem\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleDelete(node);\n                }}\n                className=\"text-red-400 hover:bg-red-900/20\"\n              >\n                <Trash2 size={14} className=\"mr-2\" />\n                Delete {selectedItems.size > 1 && selectedItems.has(getItemId(node)) ? `(${selectedItems.size} items)` : ''}\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {node.type === 'folder' && isExpanded && (\n          <div>\n            {node.children.map(child => renderNode(child, depth + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const tree = buildTree();\n\n  return (\n    <div ref={explorerRef} className=\"w-80 h-full bg-gray-900/95 border-r border-gray-700/50 backdrop-blur-sm flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-700/50\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"text-lg font-semibold text-[var(--electric-blue)] glowing-text\">\n            Knowledge Base\n          </h2>\n          <div className=\"flex gap-1\">\n            {selectedItems.size > 0 && (\n              <span className=\"text-xs text-gray-400 mr-2\">\n                {selectedItems.size} selected\n              </span>\n            )}\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={handleImport}\n              className=\"h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-700\"\n              title=\"Import .md file\"\n            >\n              <Upload size={16} />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => setCreateFolderParent(0)}\n              className=\"h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-700\"\n              title=\"New folder\"\n            >\n              <FolderPlus size={16} />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => setCreateNoteParent(0)}\n              className=\"h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-700\"\n              title=\"New note\"\n            >\n              <FilePlus size={16} />\n            </Button>\n          </div>\n        </div>\n        \n        {/* Instructions */}\n        <div className=\"text-xs text-gray-500 mt-2\">\n          {selectedItems.size > 0 ? (\n            <>\n              <div className=\"text-yellow-400 font-medium mb-1\">\n                {selectedItems.size} items selected\n              </div>\n              <div>• Ctrl+Click to add/remove items</div>\n              <div>• Shift+Click for range selection</div>\n              <div>• Right-click or use menu to delete</div>\n              <div>• Click outside to clear selection</div>\n            </>\n          ) : (\n            <>\n              <div>• Ctrl+Click to select multiple items</div>\n              <div>• Shift+Click for range selection</div>\n              <div>• Drag items to reorganize structure</div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* File Tree */}\n      <div \n        className=\"flex-1 overflow-y-auto scrollbar-thin p-2\"\n        onClick={handlePanelClick}\n        onDragOver={(e) => {\n          e.preventDefault();\n          setDragOver('root');\n        }}\n        onDragLeave={(e) => {\n          if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n            setDragOver(null);\n          }\n        }}\n        onDrop={(e) => {\n          e.preventDefault();\n          try {\n            const dragData = JSON.parse(e.dataTransfer.getData('text/plain'));\n            \n            if (dragData.type === 'file-explorer-items') {\n              // Move items to root with a small delay to prevent race conditions\n              dragData.items.forEach((itemId: string, index: number) => {\n                setTimeout(() => {\n                  const [type, id] = itemId.split('-');\n                  const itemIdNum = parseInt(id);\n                  \n                  if (type === 'folder') {\n                    updateFolderMutation.mutate({\n                      id: itemIdNum,\n                      data: { parentId: null }\n                    });\n                  } else if (type === 'note') {\n                    updateNoteMutation.mutate({\n                      id: itemIdNum,\n                      data: { folderId: null }\n                    });\n                  }\n                }, index * 100); // 100ms delay between each item\n              });\n              \n              toast({\n                title: \"Items moved\",\n                description: `Successfully moved ${dragData.items.length} item(s) to root`\n              });\n            }\n          } catch (error) {\n            console.error('Root drop error:', error);\n          }\n          \n          setDragOver(null);\n          setDraggedItems(new Set());\n          setSelectedItems(new Set());\n        }}\n      >\n        <div className={`transition-colors ${dragOver === 'root' ? 'bg-green-500/10 border-2 border-green-500 rounded' : ''}`}>\n          {tree.map(node => renderNode(node))}\n        </div>\n      </div>\n\n      {/* Create Folder Dialog */}\n      <Dialog open={createFolderParent !== null} onOpenChange={() => setCreateFolderParent(null)}>\n        <DialogContent className=\"bg-gray-800 border-gray-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Create New Folder</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              placeholder=\"Folder name\"\n              value={newFolderName}\n              onChange={(e) => setNewFolderName(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleCreateFolder()}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n            />\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleCreateFolder}\n                disabled={!newFolderName.trim() || createFolderMutation.isPending}\n                className=\"bg-[var(--electric-blue)] hover:bg-[var(--electric-blue)]/80\"\n              >\n                Create\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateFolderParent(null)}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Note Dialog */}\n      <Dialog open={createNoteParent !== null} onOpenChange={() => setCreateNoteParent(null)}>\n        <DialogContent className=\"bg-gray-800 border-gray-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Create New Note</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              placeholder=\"Note title\"\n              value={newNoteName}\n              onChange={(e) => setNewNoteName(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleCreateNote()}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n            />\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleCreateNote}\n                disabled={!newNoteName.trim() || createNoteMutation.isPending}\n                className=\"bg-[var(--electric-blue)] hover:bg-[var(--electric-blue)]/80\"\n              >\n                Create\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateNoteParent(null)}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Duplicate File Confirmation Dialog */}\n      <AlertDialog open={duplicateCheck.show} onOpenChange={() => setDuplicateCheck({ show: false, duplicates: [], newFiles: [] })}>\n        <AlertDialogContent className=\"bg-gray-800 border-gray-700\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-white flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />\n              Duplicate Files Found\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-300\">\n              {duplicateCheck.duplicates.length} file(s) already exist with the same name:\n              <div className=\"mt-2 space-y-1\">\n                {duplicateCheck.duplicates.map(({ file, existingNote }) => (\n                  <div key={file.name} className=\"text-sm text-gray-400 bg-gray-700 px-2 py-1 rounded\">\n                    📄 {file.name} → {existingNote.title}\n                  </div>\n                ))}\n              </div>\n              {duplicateCheck.newFiles.length > 0 && (\n                <div className=\"mt-2\">\n                  {duplicateCheck.newFiles.length} new file(s) will be imported.\n                </div>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={handleCancel}\n              className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n            >\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleSkipDuplicates}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              Skip Duplicates\n            </AlertDialogAction>\n            <AlertDialogAction \n              onClick={handleOverwriteAll}\n              className=\"bg-orange-600 hover:bg-orange-700\"\n            >\n              Overwrite All\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Bulk Delete Confirmation Dialog */}\n      <AlertDialog open={deleteConfirmation.show} onOpenChange={() => setDeleteConfirmation({ show: false, items: [] })}>\n        <AlertDialogContent className=\"bg-gray-800 border-gray-700\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-white flex items-center gap-2\">\n              <Trash2 className=\"w-5 h-5 text-red-500\" />\n              Delete Multiple Items\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-300\">\n              Are you sure you want to delete {deleteConfirmation.items.length} selected items?\n              <div className=\"mt-3 max-h-40 overflow-y-auto space-y-1\">\n                {deleteConfirmation.items.map(itemId => {\n                  const [type, id] = itemId.split('-');\n                  const node = flatItemsRef.current.find(item => item.id === itemId)?.node;\n                  return (\n                    <div key={itemId} className=\"text-sm text-gray-400 bg-gray-700 px-2 py-1 rounded flex items-center gap-2\">\n                      {type === 'folder' ? <Folder size={14} /> : <FileText size={14} />}\n                      {node?.name || itemId}\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"mt-3 text-sm text-red-400\">\n                This action cannot be undone.\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => setDeleteConfirmation({ show: false, items: [] })}\n              className=\"bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600\"\n            >\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleBulkDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              Delete All\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Right-click context menu */}\n      {contextMenu.show && contextMenu.node && (\n        <div\n          className=\"fixed z-50 bg-gray-800 border border-gray-700 rounded-md shadow-lg min-w-[160px]\"\n          style={{\n            left: contextMenu.x,\n            top: contextMenu.y,\n          }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <div className=\"py-1\">\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleEdit(contextMenu.node!);\n                setContextMenu({ show: false, x: 0, y: 0, node: null });\n              }}\n              className=\"flex items-center w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700\"\n            >\n              <Edit3 size={14} className=\"mr-2\" />\n              Rename\n            </button>\n            {contextMenu.node.type === 'folder' && (\n              <>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setCreateFolderParent(contextMenu.node!.id);\n                    setContextMenu({ show: false, x: 0, y: 0, node: null });\n                  }}\n                  className=\"flex items-center w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700\"\n                >\n                  <FolderPlus size={14} className=\"mr-2\" />\n                  New Folder\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setCreateNoteParent(contextMenu.node!.id);\n                    setContextMenu({ show: false, x: 0, y: 0, node: null });\n                  }}\n                  className=\"flex items-center w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700\"\n                >\n                  <FilePlus size={14} className=\"mr-2\" />\n                  New Note\n                </button>\n              </>\n            )}\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleDelete(contextMenu.node!);\n                setContextMenu({ show: false, x: 0, y: 0, node: null });\n              }}\n              className=\"flex items-center w-full px-3 py-2 text-sm text-red-400 hover:bg-red-900/20\"\n            >\n              <Trash2 size={14} className=\"mr-2\" />\n              Delete {selectedItems.size > 1 && selectedItems.has(getItemId(contextMenu.node)) ? `(${selectedItems.size} items)` : ''}\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Hidden file input for import */}\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileChange}\n        accept=\".md\"\n        multiple\n        style={{ display: 'none' }}\n      />\n    </div>\n  );\n}","size_bytes":45213},"client/src/components/Graph3D.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport ForceGraph3D from '3d-force-graph';\nimport * as THREE from 'three';\nimport type { Note } from '@shared/schema';\n\ninterface Graph3DProps {\n  notes: Note[];\n  onNodeClick: (note: Note) => void;\n  onHomeCameraRef?: (homeCamera: () => void) => void;\n  nodeSize?: number;\n  particleSize?: number;\n  labelThreshold?: number;\n  nodeDistance?: number;\n}\n\ninterface GraphNode {\n  id: number;\n  name: string;\n  val: number;\n  color: string;\n  note: Note;\n}\n\ninterface GraphLink {\n  source: number;\n  target: number;\n  color: string;\n}\n\nexport function Graph3D({ notes, onNodeClick, onHomeCameraRef, nodeSize = 1, particleSize = 1, labelThreshold = 400, nodeDistance = 200 }: Graph3DProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const graphRef = useRef<any>(null);\n  const homeCameraRef = useRef<(() => void) | null>(null);\n  const labelMaterialsRef = useRef<THREE.SpriteMaterial[]>([]);\n  const cameraPositionRef = useRef<{ position: THREE.Vector3; lookAt: THREE.Vector3 } | null>(null);\n\n  const getNodeColor = (category: string): string => {\n    const colors: Record<string, string> = {\n      philosophy: '#FF6B6B',\n      science: '#4ECDC4',\n      history: '#45B7D1',\n      art: '#96CEB4',\n      literature: '#FFEEAD',\n      psychology: '#D4A5A5',\n      technology: '#9B59B6',\n      mathematics: '#3498DB',\n      biology: '#2ECC71',\n      physics: '#E74C3C',\n      business: '#FF6B6B'\n    };\n    return colors[category] || '#ffffff';\n  };\n\n  useEffect(() => {\n    if (!containerRef.current || !notes.length) return;\n\n    // Save current camera position before recreating graph\n    if (graphRef.current && graphRef.current.camera) {\n      const camera = graphRef.current.camera();\n      const controls = graphRef.current.controls();\n      if (camera && controls) {\n        cameraPositionRef.current = {\n          position: camera.position.clone(),\n          lookAt: controls.target.clone()\n        };\n      }\n    }\n\n    // Clear previous label materials\n    labelMaterialsRef.current = [];\n\n    const nodes: GraphNode[] = notes.map(note => ({\n      id: note.id,\n      name: note.title,\n      val: (note.connections?.length || 0) + 3,\n      color: getNodeColor(note.category),\n      note\n    }));\n\n    // Extract wiki links from note content and create connections\n    const extractWikiLinks = (content: string): string[] => {\n      const wikiLinkRegex = /\\[\\[([^\\]]+)\\]\\]/g;\n      const links: string[] = [];\n      let match;\n      \n      while ((match = wikiLinkRegex.exec(content)) !== null) {\n        const linkContent = match[1];\n        const [title] = linkContent.includes('|') \n          ? linkContent.split('|', 2).map(s => s.trim())\n          : [linkContent.trim()];\n        links.push(title);\n      }\n      return links;\n    };\n\n    // Create a map of note titles to IDs for quick lookup\n    const titleToIdMap = new Map<string, number>();\n    notes.forEach(note => {\n      titleToIdMap.set(note.title, note.id);\n    });\n\n    // Generate links based on wiki links in content\n    const links: GraphLink[] = notes.flatMap(note => {\n      const wikiLinks = extractWikiLinks(note.content);\n      return wikiLinks\n        .map(linkedTitle => titleToIdMap.get(linkedTitle))\n        .filter(targetId => targetId !== undefined && targetId !== note.id)\n        .map(targetId => ({\n          source: note.id,\n          target: targetId!,\n          color: '#ffffff60'\n        }));\n    });\n\n    const graphData = { nodes, links };\n\n    const graph = ForceGraph3D()(containerRef.current!)\n      .graphData(graphData)\n      .nodeLabel('name')\n      .nodeColor('color')\n      .nodeRelSize(6)\n      .linkWidth(1)\n      .linkColor('color')\n      .backgroundColor('#00000000')\n      .showNavInfo(false)\n      .linkDirectionalParticles(4)\n      .linkDirectionalParticleWidth(2 * particleSize)\n      .linkDirectionalParticleSpeed(0.004)\n      .linkDirectionalParticleColor(() => '#ffffff')\n      .linkDirectionalArrowLength(3.5)\n      .linkDirectionalArrowRelPos(1)\n      .linkDirectionalParticleResolution(8)\n      .enableNodeDrag(true)\n      .enablePointerInteraction(true)\n      .width(containerRef.current!.clientWidth)\n      .height(containerRef.current!.clientHeight)\n\n      .onNodeClick((node: GraphNode) => {\n        onNodeClick(node.note);\n        \n        // Animate camera to node\n        const distance = 40;\n        const distRatio = 1 + distance / Math.hypot(node.x || 0, node.y || 0, node.z || 0);\n        \n        graph.cameraPosition(\n          {\n            x: (node.x || 0) * distRatio,\n            y: (node.y || 0) * distRatio,\n            z: (node.z || 0) * distRatio\n          },\n          node,\n          3000\n        );\n      })\n      .onNodeHover((node: GraphNode | null) => {\n        if (containerRef.current) {\n          containerRef.current.style.cursor = node ? 'grab' : 'default';\n        }\n      })\n      .nodeThreeObject((node: GraphNode) => {\n        const group = new THREE.Group();\n        \n        // Scale based on nodeSize prop\n        const baseSize = 4;\n        const scaledSize = baseSize * nodeSize;\n        const glowSize = scaledSize * 1.5;\n        const outerGlowSize = scaledSize * 2;\n\n        // Main sphere\n        const sphere = new THREE.Mesh(\n          new THREE.SphereGeometry(scaledSize),\n          new THREE.MeshPhongMaterial({\n            color: node.color,\n            transparent: true,\n            opacity: 0.8\n          })\n        );\n        group.add(sphere);\n\n        // Glow effect\n        const glowGeometry = new THREE.SphereGeometry(glowSize);\n        const glowMaterial = new THREE.MeshBasicMaterial({\n          color: node.color,\n          transparent: true,\n          opacity: 0.3,\n          side: THREE.BackSide\n        });\n        const glow = new THREE.Mesh(glowGeometry, glowMaterial);\n        group.add(glow);\n\n        // Outer glow for extra effect\n        const outerGlowGeometry = new THREE.SphereGeometry(outerGlowSize);\n        const outerGlowMaterial = new THREE.MeshBasicMaterial({\n          color: node.color,\n          transparent: true,\n          opacity: 0.1,\n          side: THREE.BackSide\n        });\n        const outerGlow = new THREE.Mesh(outerGlowGeometry, outerGlowMaterial);\n        group.add(outerGlow);\n\n        // Add text label with high resolution\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        const fontSize = 32; // Use higher resolution font\n        const padding = 12;\n        const pixelRatio = window.devicePixelRatio || 1;\n        \n        if (context) {\n          // Measure text at high resolution\n          context.font = `${fontSize}px Arial`;\n          const textWidth = context.measureText(node.name).width;\n          \n          // Set canvas size with device pixel ratio for crisp text\n          const canvasWidth = (textWidth + padding * 2) * pixelRatio;\n          const canvasHeight = (fontSize + padding * 2) * pixelRatio;\n          \n          canvas.width = canvasWidth;\n          canvas.height = canvasHeight;\n          \n          // Scale context for high DPI\n          context.scale(pixelRatio, pixelRatio);\n          \n          // Re-set font after canvas resize\n          context.font = `${fontSize}px Arial`;\n          \n          // Add background for better visibility\n          context.fillStyle = 'rgba(0, 0, 0, 0.7)';\n          context.fillRect(0, 0, (textWidth + padding * 2), (fontSize + padding * 2));\n          \n          // Add text\n          context.fillStyle = '#ffffff';\n          context.textAlign = 'center';\n          context.textBaseline = 'middle';\n          \n          context.fillText(node.name, (textWidth + padding * 2) / 2, (fontSize + padding * 2) / 2);\n        }\n        \n        const texture = new THREE.CanvasTexture(canvas);\n        // Enable better filtering for crisp text\n        texture.generateMipmaps = false;\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        \n        const labelMaterial = new THREE.SpriteMaterial({\n          map: texture,\n          transparent: true,\n          opacity: 1.0 // Will be controlled by fade animation\n        });\n        \n        const label = new THREE.Sprite(labelMaterial);\n        // Scale down to desired size (16px equivalent)\n        const scaleFactor = 16 / fontSize; // Scale down from 32 to 16\n        label.scale.set(\n          (canvas.width / pixelRatio) * scaleFactor / 8, \n          (canvas.height / pixelRatio) * scaleFactor / 8, \n          1\n        );\n        label.position.set(0, scaledSize + 6, 0); // Position closer to node center\n        \n        // Store reference for fade updates\n        labelMaterialsRef.current.push(labelMaterial);\n        \n        group.add(label);\n\n        return group;\n      });\n\n    graphRef.current = graph;\n\n    // Configure force simulation for node distance\n    graph.d3Force('link')?.distance(nodeDistance);\n    graph.d3Force('charge')?.strength(-nodeDistance * 2);\n\n    // Force immediate centering and ensure labels are visible\n    const centerGraphAndShowLabels = () => {\n      if (graph) {\n        // Force graph to center at origin\n        graph.cameraPosition(\n          { x: 0, y: 0, z: 350 },  // Camera position - centered at origin\n          { x: 0, y: 0, z: 0 },    // Look at origin\n          0                        // No animation on initial load\n        );\n        \n        // Set controls to center\n        const controls = graph.controls();\n        if (controls) {\n          controls.target.set(0, 0, 0);\n          controls.update();\n        }\n        \n        // Force refresh labels by updating the graph\n        graph.refresh();\n      }\n    };\n    \n    // Center immediately and multiple times to ensure it sticks\n    centerGraphAndShowLabels();\n    setTimeout(centerGraphAndShowLabels, 100);\n    setTimeout(centerGraphAndShowLabels, 500);\n    setTimeout(centerGraphAndShowLabels, 1500);\n\n    // Update label opacity based on camera distance from origin\n    const updateLabelOpacity = () => {\n      if (!graph) return;\n      \n      const camera = graph.camera();\n      // Calculate distance from camera to origin (0,0,0)\n      const cameraDistance = Math.sqrt(\n        camera.position.x * camera.position.x +\n        camera.position.y * camera.position.y +\n        camera.position.z * camera.position.z\n      );\n      \n      // Calculate opacity based on zoom distance with smooth fade\n      const fadeStartDistance = 800; // X point - start fading at this distance\n      const fadeEndDistance = 1500;  // Y point - completely fade at this distance\n      const maxOpacity = 1.0; // 100% opacity when close\n      \n      let opacity;\n      if (cameraDistance <= fadeStartDistance) {\n        // 100% opacity when camera is closer than fade start\n        opacity = maxOpacity;\n      } else if (cameraDistance >= fadeEndDistance) {\n        // Minimum opacity when camera is beyond fade end (never completely fade out)\n        opacity = 0.3;\n      } else {\n        // Smooth fade between start and end points\n        const fadeProgress = (cameraDistance - fadeStartDistance) / (fadeEndDistance - fadeStartDistance);\n        opacity = Math.max(0.3, maxOpacity * (1 - fadeProgress));\n      }\n      \n      // Update all stored label materials\n      labelMaterialsRef.current.forEach((material) => {\n        if (material) {\n          material.opacity = opacity;\n        }\n      });\n    };\n\n    // Enable fade animation based on zoom distance\n    const animate = () => {\n      updateLabelOpacity();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Home camera function\n    const homeCamera = () => {\n      console.log('homeCamera called, graphRef.current:', graphRef.current);\n      // Wait for graph to be ready if it's not initialized yet\n      const attemptHomeCamera = () => {\n        if (graphRef.current) {\n          const graph = graphRef.current;\n          \n          // Reset camera to center at origin\n          graph.cameraPosition(\n            { x: 0, y: 0, z: 400 }, // Camera position\n            { x: 0, y: 0, z: 0 },   // Look at center\n            2000                    // Animation duration\n          );\n          \n          // Also reset controls target\n          setTimeout(() => {\n            const controls = graph.controls();\n            if (controls) {\n              controls.target.set(0, 0, 0);\n              controls.update();\n            }\n          }, 100);\n        } else {\n          // Retry after a short delay if graph is not ready\n          setTimeout(attemptHomeCamera, 100);\n        }\n      };\n      \n      attemptHomeCamera();\n    };\n\n    // Store the function reference\n    homeCameraRef.current = homeCamera;\n    \n    // Expose function immediately (before timeout)\n    if (onHomeCameraRef) {\n      console.log('Calling onHomeCameraRef with homeCamera function');\n      onHomeCameraRef(homeCamera);\n    }\n\n    // Enable middle mouse button panning and expose home camera function\n    setTimeout(() => {\n      const controls = graph.controls();\n      if (controls) {\n        // Enable all mouse interactions\n        controls.enablePan = true;\n        controls.enableZoom = true;\n        controls.enableRotate = true;\n        \n        // Set mouse buttons for different actions\n        // LEFT: Node dragging (handled by force-graph)\n        // RIGHT: View rotation\n        // MIDDLE: Pan\n        controls.mouseButtons = {\n          LEFT: null, // Disable left mouse rotation to allow node dragging\n          MIDDLE: THREE.MOUSE.PAN,\n          RIGHT: THREE.MOUSE.ROTATE\n        };\n        \n        // Set touch gestures\n        controls.touches = {\n          ONE: THREE.TOUCH.ROTATE,\n          TWO: THREE.TOUCH.DOLLY_PAN\n        };\n        \n        // Additional panning settings\n        controls.panSpeed = 0.1; // Reduced from 0.5 to make panning less sensitive\n        controls.keyPanSpeed = 0.5;\n        controls.enableKeys = true;\n        \n        // Allow continuous panning\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.05;\n        \n        // Set zoom limits\n        controls.minDistance = 10;\n        controls.maxDistance = 2000;\n        \n        // Enable keyboard controls (arrow keys for panning)\n        controls.keys = {\n          LEFT: 37,  // Arrow left\n          UP: 38,    // Arrow up\n          RIGHT: 39, // Arrow right\n          BOTTOM: 40 // Arrow down\n        };\n      }\n      \n      // Graph is now fully initialized\n      // Restore camera position if we have one saved\n      if (cameraPositionRef.current) {\n        const camera = graph.camera();\n        const controls = graph.controls();\n        if (camera && controls) {\n          camera.position.copy(cameraPositionRef.current.position);\n          controls.target.copy(cameraPositionRef.current.lookAt);\n          controls.update();\n        }\n      }\n    }, 100);\n\n    // Handle window resize\n    const handleResize = () => {\n      if (containerRef.current) {\n        graph.width(containerRef.current.clientWidth);\n        graph.height(containerRef.current.clientHeight);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (graphRef.current) {\n        graphRef.current = null;\n      }\n    };\n  }, [notes, onNodeClick, nodeDistance]); // Recreate graph when notes, click handler, or node distance changes\n\n  // Separate effect for updating node and particle sizes without recreating the graph\n  useEffect(() => {\n    if (!graphRef.current) return;\n\n    const graph = graphRef.current;\n    \n    // Update node sizes with original glow effect\n    graph.nodeThreeObject((node: GraphNode) => {\n      const scaledSize = node.val * nodeSize;\n      const group = new THREE.Group();\n      \n      // Main sphere\n      const geometry = new THREE.SphereGeometry(scaledSize, 32, 32);\n      const material = new THREE.MeshPhongMaterial({\n        color: node.color,\n        emissive: node.color,\n        emissiveIntensity: 0.2,\n        shininess: 100,\n        transparent: true,\n        opacity: 0.8\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      group.add(sphere);\n\n      // Glow effect\n      const glowSize = scaledSize * 1.5;\n      const glowGeometry = new THREE.SphereGeometry(glowSize);\n      const glowMaterial = new THREE.MeshBasicMaterial({\n        color: node.color,\n        transparent: true,\n        opacity: 0.3,\n        side: THREE.BackSide\n      });\n      const glow = new THREE.Mesh(glowGeometry, glowMaterial);\n      group.add(glow);\n\n      // Outer glow for extra effect\n      const outerGlowSize = scaledSize * 2;\n      const outerGlowGeometry = new THREE.SphereGeometry(outerGlowSize);\n      const outerGlowMaterial = new THREE.MeshBasicMaterial({\n        color: node.color,\n        transparent: true,\n        opacity: 0.1,\n        side: THREE.BackSide\n      });\n      const outerGlow = new THREE.Mesh(outerGlowGeometry, outerGlowMaterial);\n      group.add(outerGlow);\n\n      return group;\n    });\n\n    // Update particle size\n    graph.linkDirectionalParticleWidth(particleSize);\n  }, [nodeSize, particleSize]);\n\n\n\n  return <div ref={containerRef} className=\"graph-container\" style={{ width: '100%', height: '100%' }} />;\n}\n","size_bytes":17250},"client/src/components/NotePreview.tsx":{"content":"import { X, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeRaw from 'rehype-raw';\nimport { remarkWikiLink } from '@/lib/remarkWikiLink';\nimport { remarkImageEmbed } from '@/lib/remarkImageEmbed';\nimport { remarkNoteEmbed } from '@/lib/remarkNoteEmbed';\nimport { NoteEditor } from '@/components/NoteEditor';\nimport { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useState, useEffect, useRef } from 'react';\nimport type { Note } from '@shared/schema';\n\ninterface NotePreviewProps {\n  note: Note;\n  onClose: () => void;\n  onNoteSelect?: (note: Note) => void;\n  initialPosition?: { x: number; y: number };\n  initialSize?: { width: number; height: number };\n  onPositionChange?: (position: { x: number; y: number }) => void;\n  onSizeChange?: (size: { width: number; height: number }) => void;\n}\n\nexport function NotePreview({ \n  note, \n  onClose, \n  onNoteSelect,\n  initialPosition = { x: 100, y: 100 },\n  initialSize = { width: 500, height: 600 },\n  onPositionChange,\n  onSizeChange\n}: NotePreviewProps) {\n  const [noteHistory, setNoteHistory] = useState<Note[]>([note]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [position, setPosition] = useState(initialPosition);\n  const [size, setSize] = useState(initialSize);\n\n  const [isHoveringLink, setIsHoveringLink] = useState(false);\n  const [editedContent, setEditedContent] = useState(note.content);\n  const [imageNotes, setImageNotes] = useState<Map<string, Note>>(new Map());\n  const [inlineEditMode, setInlineEditMode] = useState(false);\n  const [editingEmbedId, setEditingEmbedId] = useState<string | null>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  \n  // Ensure window stays within viewport bounds on initial render and when size changes\n  useEffect(() => {\n    const constrainedX = Math.max(0, Math.min(window.innerWidth - size.width, position.x));\n    const constrainedY = Math.max(0, Math.min(window.innerHeight - size.height, position.y));\n    \n    if (constrainedX !== position.x || constrainedY !== position.y) {\n      setPosition({ x: constrainedX, y: constrainedY });\n    }\n  }, [size.width, size.height]);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeHandle, setResizeHandle] = useState<string>('');\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0, width: 0, height: 0, initialX: 0, initialY: 0 });\n  const queryClient = useQueryClient();\n  \n  // Fetch all notes for wiki link and image embed functionality\n  const { data: allNotes = [] } = useQuery<Note[]>({\n    queryKey: ['/api/notes'],\n  });\n  \n  // Use refs to store the current state for event handlers\n  const positionRef = useRef(position);\n  const sizeRef = useRef(size);\n  const dragStartRef = useRef(dragStart);\n  const resizeStartRef = useRef(resizeStart);\n  const resizeHandleRef = useRef(resizeHandle);\n  \n  // Update refs when state changes\n  useEffect(() => {\n    positionRef.current = position;\n    sizeRef.current = size;\n    dragStartRef.current = dragStart;\n    resizeStartRef.current = resizeStart;\n    resizeHandleRef.current = resizeHandle;\n  }, [position, size, dragStart, resizeStart, resizeHandle]);\n  \n  const currentNote = noteHistory[currentIndex] || note;\n\n  // Update history when note changes externally (not from navigation)\n  useEffect(() => {\n    // Only reset history if this note is not already in the current position\n    if (!noteHistory[currentIndex] || noteHistory[currentIndex].id !== note.id) {\n      // If we're not at the end of history, truncate future history\n      const newHistory = [...noteHistory.slice(0, currentIndex + 1), note];\n      setNoteHistory(newHistory);\n      setCurrentIndex(newHistory.length - 1);\n    }\n    setEditedContent(note.content);\n  }, [note.id]);\n\n  // Update edited content when current note changes\n  useEffect(() => {\n    setEditedContent(currentNote.content);\n  }, [currentNote.content]);\n\n  // Load image notes referenced in content\n  useEffect(() => {\n    const imageEmbedRegex = /!\\[\\[([^\\]]+)\\]\\]/g;\n    const matches = Array.from(currentNote.content.matchAll(imageEmbedRegex));\n    const imageTitles = matches.map(match => match[1].trim());\n    \n    const newImageNotes = new Map<string, Note>();\n    imageTitles.forEach(title => {\n      const imageNote = findNoteByTitle(title);\n      if (imageNote && imageNote.type === 'image') {\n        newImageNotes.set(title, imageNote);\n      }\n    });\n    \n    setImageNotes(newImageNotes);\n  }, [currentNote.content, allNotes]);\n\n  const canGoBack = currentIndex > 0;\n  const canGoForward = currentIndex < noteHistory.length - 1;\n\n  const goBack = () => {\n    if (canGoBack) {\n      const newIndex = currentIndex - 1;\n      setCurrentIndex(newIndex);\n      if (onNoteSelect) {\n        onNoteSelect(noteHistory[newIndex]);\n      }\n    }\n  };\n\n  const goForward = () => {\n    if (canGoForward) {\n      const newIndex = currentIndex + 1;\n      setCurrentIndex(newIndex);\n      if (onNoteSelect) {\n        onNoteSelect(noteHistory[newIndex]);\n      }\n    }\n  };\n\n  // Update note mutation\n  const updateNoteMutation = useMutation({\n    mutationFn: async (data: { id: number; content: string }) => {\n      return apiRequest('PATCH', `/api/notes/${data.id}`, { content: data.content });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      setEditMode(false);\n    },\n  });\n\n  // Save edited content\n  const saveNote = () => {\n    if (editedContent !== currentNote.content) {\n      updateNoteMutation.mutate({ id: currentNote.id, content: editedContent });\n    } else {\n      setEditMode(false);\n    }\n  };\n\n  // Function to find note by title for wiki links\n  const findNoteByTitle = (title: string): Note | undefined => {\n    // Decode URL encoded strings and trim whitespace\n    const decodedTitle = decodeURIComponent(title).trim();\n    const found = allNotes.find(n => \n      n.title.trim().toLowerCase() === decodedTitle.toLowerCase()\n    );\n    return found;\n  };\n\n  // Process note embeds directly in the content\n  const processEmbeddedNotes = (content: string): string => {\n    const noteEmbedRegex = /!\\[\\[([^\\]]+)\\]\\]/g;\n    let embedIndex = 0;\n    \n    return content.replace(noteEmbedRegex, (match, noteTitle) => {\n      const currentEmbedId = `embed-${embedIndex++}`;\n      const embeddedNote = findNoteByTitle(noteTitle.trim());\n      \n      // If we're editing this specific embed, show the raw syntax\n      if (editingEmbedId === currentEmbedId) {\n        return `<div class=\"editing-embed\" data-embed-id=\"${currentEmbedId}\" data-original-syntax=\"${match.replace(/\"/g, '&quot;')}\">${match}</div>`;\n      }\n      \n      if (embeddedNote) {\n        // For image notes, create a special marker\n        if (embeddedNote.type === 'image') {\n          return `\\n\\n<div class=\"embedded-image\" data-embed-id=\"${currentEmbedId}\" data-original-syntax=\"${match.replace(/\"/g, '&quot;')}\" data-note-title=\"${embeddedNote.title.replace(/\"/g, '&quot;')}\" data-image-data=\"${embeddedNote.imageData}\" data-mime-type=\"${embeddedNote.mimeType}\"></div>\\n\\n`;\n        }\n        // For text notes, use a div with blue border instead of blockquote to avoid italic\n        return `\\n\\n<div class=\"embedded-note\" data-embed-id=\"${currentEmbedId}\" data-original-syntax=\"${match.replace(/\"/g, '&quot;')}\" data-note-title=\"${embeddedNote.title}\">\\n\\n**${embeddedNote.title}**\\n\\n${embeddedNote.content}\\n\\n</div>\\n\\n`;\n      }\n      return match; // Return original if note not found\n    });\n  };\n\n  // Handle wiki link clicks\n  const handleWikiLinkClick = (title: string) => {\n    const targetNote = findNoteByTitle(title);\n    if (targetNote && onNoteSelect) {\n      // Add to history and navigate\n      const newHistory = [...noteHistory.slice(0, currentIndex + 1), targetNote];\n      setNoteHistory(newHistory);\n      setCurrentIndex(newHistory.length - 1);\n      onNoteSelect(targetNote);\n    } else {\n      // Auto-create note if it doesn't exist\n      createNewNote(title);\n    }\n  };\n\n  // Function to create a new note\n  const createNewNote = async (title: string) => {\n    try {\n      const response = await fetch('/api/notes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: title.trim(),\n          content: `# ${title.trim()}\\n\\nThis note was auto-created from a wiki link.`,\n          tags: [],\n          category: 'general',\n          folderId: null,\n          connections: []\n        }),\n      });\n\n      if (response.ok) {\n        const newNote = await response.json();\n        // Invalidate the notes cache to refresh the list\n        queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n        \n        // Navigate to the new note\n        if (onNoteSelect) {\n          const newHistory = [...noteHistory.slice(0, currentIndex + 1), newNote];\n          setNoteHistory(newHistory);\n          setCurrentIndex(newHistory.length - 1);\n          onNoteSelect(newNote);\n        }\n      }\n    } catch (error) {\n      // Handle error silently or show user feedback\n    }\n  };\n  const categoryColors: Record<string, string> = {\n    philosophy: '#FF6B6B',\n    science: '#4ECDC4',\n    history: '#45B7D1',\n    art: '#96CEB4',\n    literature: '#FFEEAD',\n    psychology: '#D4A5A5',\n    technology: '#9B59B6',\n    mathematics: '#3498DB',\n    biology: '#2ECC71',\n    physics: '#E74C3C',\n    business: '#FF6B6B'\n  };\n\n  const getTagColor = (tag: string): string => {\n    // Map common tags to categories\n    const tagToCategory: Record<string, string> = {\n      business: 'business',\n      wealth: 'business',\n      marketing: 'business',\n      psychology: 'psychology',\n      mindset: 'psychology',\n      productivity: 'psychology',\n      philosophy: 'philosophy',\n      biology: 'biology',\n      neuroscience: 'biology',\n      art: 'art',\n      creativity: 'art',\n      science: 'science',\n      technology: 'technology',\n      leadership: 'business',\n      strategy: 'business',\n      influence: 'psychology',\n      habits: 'psychology',\n      behavior: 'psychology'\n    };\n\n    const category = tagToCategory[tag] || 'science';\n    return categoryColors[category] || '#ffffff';\n  };\n\n  // Handle mouse events for dragging and resizing\n  const handleMouseDown = (e: React.MouseEvent, action: 'drag' | 'resize', handle?: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (action === 'drag') {\n      setIsDragging(true);\n      setDragStart({\n        x: e.clientX - position.x,\n        y: e.clientY - position.y\n      });\n    } else if (action === 'resize') {\n      setIsResizing(true);\n      setResizeHandle(handle || '');\n      setResizeStart({\n        x: e.clientX,\n        y: e.clientY,\n        width: size.width,\n        height: size.height,\n        initialX: position.x,\n        initialY: position.y\n      });\n    }\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      // Constrain drag to viewport boundaries - keep entire window visible\n      const newX = Math.max(0, Math.min(window.innerWidth - sizeRef.current.width, e.clientX - dragStartRef.current.x));\n      const newY = Math.max(0, Math.min(window.innerHeight - sizeRef.current.height, e.clientY - dragStartRef.current.y));\n      \n      setPosition({ x: newX, y: newY });\n      \n      // Notify parent of position change\n      if (onPositionChange) onPositionChange({ x: newX, y: newY });\n    } else if (isResizing) {\n      const resizeData = resizeStartRef.current;\n      const handle = resizeHandleRef.current;\n      const deltaX = e.clientX - resizeData.x;\n      const deltaY = e.clientY - resizeData.y;\n      \n      let newWidth = resizeData.width;\n      let newHeight = resizeData.height;\n      let newX = resizeData.initialX;\n      let newY = resizeData.initialY;\n      \n      // Right edge resize - anchor left side\n      if (handle.includes('right')) {\n        newWidth = Math.max(300, Math.min(window.innerWidth - resizeData.initialX, resizeData.width + deltaX));\n      }\n      \n      // Left edge resize - anchor right side, adjust position\n      if (handle.includes('left')) {\n        const rightEdge = resizeData.initialX + resizeData.width;\n        newWidth = Math.max(300, resizeData.width - deltaX);\n        newX = rightEdge - newWidth;\n        \n        // Constrain to viewport\n        if (newX < 0) {\n          newX = 0;\n          newWidth = rightEdge;\n        }\n      }\n      \n      // Bottom edge resize - anchor top side\n      if (handle.includes('bottom')) {\n        newHeight = Math.max(400, Math.min(window.innerHeight - resizeData.initialY, resizeData.height + deltaY));\n      }\n      \n      // Top edge resize - anchor bottom side, adjust position  \n      if (handle.includes('top')) {\n        const bottomEdge = resizeData.initialY + resizeData.height;\n        newHeight = Math.max(400, resizeData.height - deltaY);\n        newY = bottomEdge - newHeight;\n        \n        // Constrain to viewport\n        if (newY < 0) {\n          newY = 0;\n          newHeight = bottomEdge;\n        }\n      }\n      \n      setSize({ width: newWidth, height: newHeight });\n      setPosition({ x: newX, y: newY });\n      \n      // Notify parent of changes\n      if (onSizeChange) onSizeChange({ width: newWidth, height: newHeight });\n      if (onPositionChange) onPositionChange({ x: newX, y: newY });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n    setResizeHandle('');\n  };\n\n  // Add global event listeners for mouse move and up\n  useEffect(() => {\n    if (isDragging || isResizing) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, isResizing]);\n\n  return (\n    <div \n      className=\"fixed bg-gray-900 border border-gray-700 rounded-lg shadow-2xl flex flex-col overflow-hidden\"\n      style={{\n        left: position.x,\n        top: position.y,\n        width: size.width,\n        height: size.height,\n        minWidth: 300,\n        minHeight: 400,\n        zIndex: 9999\n      }}\n    >\n      {/* Resize handles */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {/* Corner handles */}\n        <div \n          className=\"absolute w-3 h-3 cursor-nw-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ top: -1, left: -1, backgroundColor: 'rgba(59, 130, 246, 0.5)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'top-left')}\n        />\n        <div \n          className=\"absolute w-3 h-3 cursor-ne-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ top: -1, right: -1, backgroundColor: 'rgba(59, 130, 246, 0.5)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'top-right')}\n        />\n        <div \n          className=\"absolute w-3 h-3 cursor-sw-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ bottom: -1, left: -1, backgroundColor: 'rgba(59, 130, 246, 0.5)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'bottom-left')}\n        />\n        <div \n          className=\"absolute w-3 h-3 cursor-se-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ bottom: -1, right: -1, backgroundColor: 'rgba(59, 130, 246, 0.5)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'bottom-right')}\n        />\n        \n        {/* Edge handles */}\n        <div \n          className=\"absolute h-2 cursor-n-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ top: -1, left: 10, right: 10, backgroundColor: 'rgba(59, 130, 246, 0.3)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'top')}\n        />\n        <div \n          className=\"absolute h-2 cursor-s-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ bottom: -1, left: 10, right: 10, backgroundColor: 'rgba(59, 130, 246, 0.3)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'bottom')}\n        />\n        <div \n          className=\"absolute w-2 cursor-w-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ left: -1, top: 10, bottom: 10, backgroundColor: 'rgba(59, 130, 246, 0.3)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'left')}\n        />\n        <div \n          className=\"absolute w-2 cursor-e-resize pointer-events-auto opacity-0 hover:opacity-100 transition-opacity\"\n          style={{ right: -1, top: 10, bottom: 10, backgroundColor: 'rgba(59, 130, 246, 0.3)' }}\n          onMouseDown={(e) => handleMouseDown(e, 'resize', 'right')}\n        />\n      </div>\n      \n      {/* Header with drag handle */}\n      <div \n        className=\"flex items-center justify-between px-2 py-1 border-b border-gray-700 cursor-move select-none bg-gray-800 hover:bg-gray-750 transition-colors\"\n        onMouseDown={(e) => handleMouseDown(e, 'drag')}\n      >\n        <div className=\"flex items-center gap-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={goBack}\n            disabled={!canGoBack}\n            className=\"p-1 h-6 w-6 hover:bg-gray-700 text-gray-300 disabled:text-gray-600\"\n          >\n            <ChevronLeft className=\"h-3 w-3\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={goForward}\n            disabled={!canGoForward}\n            className=\"p-1 h-6 w-6 hover:bg-gray-700 text-gray-300 disabled:text-gray-600\"\n          >\n            <ChevronRight className=\"h-3 w-3\" />\n          </Button>\n        </div>\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"p-1 h-6 w-6 text-gray-400 hover:text-white\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Content area */}\n      <div className=\"flex-1 overflow-y-auto p-3 scrollbar-thin\">\n        <h2 className=\"text-xl font-semibold mb-2 text-[var(--electric-blue)] glowing-text\">\n          {currentNote.title}\n        </h2>\n        \n        <div className=\"flex flex-wrap gap-1 mb-3\">\n          {currentNote.tags.map(tag => {\n            const color = getTagColor(tag);\n            return (\n              <Badge\n                key={tag}\n                variant=\"secondary\"\n                className=\"tag-chip text-xs px-2 py-1\"\n                style={{\n                  backgroundColor: `${color}20`,\n                  color: color,\n                  borderColor: `${color}50`,\n                  border: '1px solid'\n                }}\n              >\n                {tag}\n              </Badge>\n            );\n          })}\n        </div>\n\n        {/* Display image directly if this is an image note */}\n        {currentNote.type === 'image' && currentNote.imageData ? (\n          <div className=\"mb-4 flex justify-center\">\n            <img \n              src={`data:${currentNote.mimeType};base64,${currentNote.imageData}`}\n              alt={currentNote.title}\n              className=\"max-w-full max-h-[70vh] rounded-lg shadow-lg\"\n            />\n          </div>\n        ) : (\n          <NoteEditor\n            content={editedContent}\n            onSave={(newContent) => {\n              setEditedContent(newContent);\n              updateNoteMutation.mutate({ id: currentNote.id, content: newContent });\n            }}\n            isReadOnly={false}\n            imageNotes={imageNotes}\n            findNoteByTitle={findNoteByTitle}\n            onWikiLinkClick={handleWikiLinkClick}\n          />\n        )}\n\n        <div className=\"border-t border-gray-700 pt-3 mt-6\">\n          <p className=\"text-xs text-gray-400 mb-2\">\n            <span className=\"font-mono\">Created:</span> {format(currentNote.created, 'PPP')}\n          </p>\n          <p className=\"text-xs text-gray-400\">\n            <span className=\"font-mono\">Connections:</span> {currentNote.connections?.length || 0} notes\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20671},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/generateNotes.ts":{"content":"import { faker } from '@faker-js/faker';\nimport type { Note } from '@shared/schema';\n\nconst TAGS = [\n  'business', 'psychology', 'mindset', 'wealth', 'marketing',\n  'leadership', 'productivity', 'personal-development', 'biology', 'strategy',\n  'philosophy', 'science', 'technology', 'art', 'creativity'\n];\n\nconst CATEGORIES = [\n  'business', 'psychology', 'philosophy', 'biology', 'science',\n  'technology', 'art', 'history', 'literature', 'mathematics'\n];\n\nexport function generateRandomNotes(count: number): Omit<Note, 'id' | 'created'>[] {\n  const notes: Omit<Note, 'id' | 'created'>[] = [];\n\n  for (let i = 0; i < count; i++) {\n    const category = faker.helpers.arrayElement(CATEGORIES);\n    const relevantTags = TAGS.filter(tag => \n      tag === category || \n      (category === 'business' && ['marketing', 'leadership', 'wealth', 'strategy'].includes(tag)) ||\n      (category === 'psychology' && ['mindset', 'productivity', 'personal-development'].includes(tag)) ||\n      (category === 'art' && ['creativity'].includes(tag))\n    );\n\n    const note = {\n      title: faker.lorem.sentence(3),\n      content: faker.lorem.paragraphs(2),\n      tags: faker.helpers.arrayElements(relevantTags.length > 0 ? relevantTags : TAGS, { min: 1, max: 3 }),\n      category,\n      connections: [] as number[]\n    };\n\n    notes.push(note);\n  }\n\n  return notes;\n}\n\nexport function generateConnections(notes: Note[]): void {\n  notes.forEach(note => {\n    const connectionCount = faker.number.int({ min: 1, max: 5 });\n    const possibleConnections = notes.filter(n => n.id !== note.id);\n    const connections: number[] = [];\n\n    for (let i = 0; i < connectionCount && i < possibleConnections.length; i++) {\n      const randomNote = faker.helpers.arrayElement(possibleConnections);\n      if (!connections.includes(randomNote.id)) {\n        connections.push(randomNote.id);\n      }\n    }\n\n    note.connections = connections;\n  });\n}\n","size_bytes":1916},"client/src/lib/noteData.ts":{"content":"import type { InsertNote } from '@shared/schema';\n\nexport const entrepreneurNotes: InsertNote[] = [\n  {\n    title: \"Rich Dad's Cash Flow Quadrant\",\n    content: \"The key difference between an employee and a business owner is that one works for money, while the other builds systems that generate money. Understanding this fundamental shift in mindset is crucial for anyone looking to achieve financial independence.\",\n    tags: ['business', 'wealth', 'mindset'],\n    category: 'business',\n    connections: []\n  },\n  {\n    title: \"Influence: The Psychology of Persuasion\",\n    content: \"The principle of social proof states that people tend to look at others' actions to determine their own behavior, especially in uncertain situations. This powerful psychological trigger can be leveraged in marketing and leadership.\\n\\nThis connects to [[The Choice Factory]] and behavioral science principles. It's also fundamental to [[High Performance Habits]] and [[Dopamine and Decision Making]].\",\n    tags: ['psychology', 'marketing', 'influence'],\n    category: 'psychology',\n    connections: []\n  },\n  {\n    title: \"100M Offers by Alex Hormozi\",\n    content: \"The grand slam offer framework: The better your offer, the less you need to be good at everything else in marketing and sales. Focus on creating irresistible value propositions that customers can't refuse.\\n\\nThis concept relates to [[Influence: The Psychology of Persuasion]] and the importance of [[Strategic Business Thinking]] in creating competitive advantages.\",\n    tags: ['marketing', 'business', 'sales'],\n    category: 'business',\n    connections: []\n  },\n  {\n    title: \"Steal Like an Artist\",\n    content: \"Nothing is completely original. All creative work builds on what came before. Embrace influence, don't run away from it. The key is to transform your influences into something uniquely yours.\",\n    tags: ['creativity', 'art', 'mindset'],\n    category: 'art',\n    connections: []\n  },\n  {\n    title: \"Man's Search for Meaning\",\n    content: \"Those who have a 'why' to live can bear with almost any 'how'. Success, like happiness, cannot be pursued; it must ensue from meaningful work and relationships.\",\n    tags: ['psychology', 'philosophy', 'meaning'],\n    category: 'philosophy',\n    connections: []\n  },\n  {\n    title: \"Finding My Virginity\",\n    content: \"Business opportunities are like buses, there's always another one coming. The key is to recognize them when they appear and have the courage to act on them.\",\n    tags: ['business', 'entrepreneurship', 'opportunities'],\n    category: 'business',\n    connections: []\n  },\n  {\n    title: \"The Choice Factory\",\n    content: \"Understanding behavioral science is crucial for effective marketing. People make decisions based on cognitive biases and mental shortcuts rather than rational analysis.\",\n    tags: ['psychology', 'marketing', 'behavior'],\n    category: 'psychology',\n    connections: []\n  },\n  {\n    title: \"Dopamine and Decision Making\",\n    content: \"Neuroscience research shows that dopamine not only rewards us for good choices but helps with decision making and risk assessment. Understanding this can improve both personal and business decisions.\",\n    tags: ['biology', 'psychology', 'neuroscience'],\n    category: 'biology',\n    connections: []\n  },\n  {\n    title: \"High Performance Habits\",\n    content: \"The most successful entrepreneurs maintain strict routines and habits that optimize their energy and focus throughout the day. Consistency in small actions leads to extraordinary results.\",\n    tags: ['productivity', 'habits', 'performance'],\n    category: 'psychology',\n    connections: []\n  },\n  {\n    title: \"Strategic Business Thinking\",\n    content: \"Effective strategy isn't about being better at the same things; it's about choosing to do different things or doing things differently. Competitive advantage comes from uniqueness, not just efficiency.\",\n    tags: ['strategy', 'business', 'competitive-advantage'],\n    category: 'business',\n    connections: []\n  }\n];\n","size_bytes":4027},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/mindmap.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Graph3D } from '@/components/Graph3D';\nimport { NotePreview } from '@/components/NotePreview';\nimport { FileExplorer } from '@/components/FileExplorer';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { RefreshCw, Settings, Network, Menu, X, Home, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Note } from '@shared/schema';\n\nexport default function MindmapPage() {\n  const [selectedNote, setSelectedNote] = useState<Note | null>(null);\n  const [isRegenerating, setIsRegenerating] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [homeCameraFn, setHomeCameraFn] = useState<(() => void) | null>(null);\n  \n  // Persistent window position and size\n  const [noteWindowPosition, setNoteWindowPosition] = useState(() => {\n    const saved = localStorage.getItem('noteWindowPosition');\n    return saved ? JSON.parse(saved) : { x: 100, y: 100 };\n  });\n  \n  const [noteWindowSize, setNoteWindowSize] = useState(() => {\n    const saved = localStorage.getItem('noteWindowSize');\n    return saved ? JSON.parse(saved) : { width: 500, height: 600 };\n  });\n  \n  // Save position and size to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('noteWindowPosition', JSON.stringify(noteWindowPosition));\n  }, [noteWindowPosition]);\n  \n  useEffect(() => {\n    localStorage.setItem('noteWindowSize', JSON.stringify(noteWindowSize));\n  }, [noteWindowSize]);\n  \n  // Debug logging\n  useEffect(() => {\n    console.log('homeCameraFn state changed:', homeCameraFn);\n  }, [homeCameraFn]);\n  \n  // Create a wrapper function to debug\n  const handleHomeCameraRef = (fn: () => void) => {\n    console.log('handleHomeCameraRef called with:', fn);\n    setHomeCameraFn(() => fn);\n  };\n\n  // Node size state for settings\n  const [nodeSize, setNodeSize] = useState(1);\n  const [particleSize, setParticleSize] = useState(1);\n  const [nodeDistance, setNodeDistance] = useState(15); // Default distance between nodes\n  const [debouncedNodeDistance, setDebouncedNodeDistance] = useState(15);\n  const labelThreshold = 200; // Fixed threshold value\n  const [showSettings, setShowSettings] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { data: notes = [], isLoading, error } = useQuery<Note[]>({\n    queryKey: ['/api/notes'],\n  });\n\n  // Debounce the nodeDistance value to prevent regenerating the graph on every slider tick\n  useEffect(() => {\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    debounceTimerRef.current = setTimeout(() => {\n      setDebouncedNodeDistance(nodeDistance);\n    }, 300); // 300ms delay\n\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, [nodeDistance]);\n\n  const regenerateMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/graph/regenerate');\n      return response.json();\n    },\n    onSuccess: (newNotes) => {\n      queryClient.setQueryData(['/api/notes'], newNotes);\n      setSelectedNote(null);\n      toast({\n        title: \"Graph Regenerated\",\n        description: \"New knowledge graph generated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to regenerate graph. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRegenerate = async () => {\n    setIsRegenerating(true);\n    await regenerateMutation.mutateAsync();\n    setTimeout(() => setIsRegenerating(false), 1500);\n  };\n\n  const categoryColors = {\n    philosophy: '#FF6B6B',\n    science: '#4ECDC4',\n    history: '#45B7D1',\n    art: '#96CEB4',\n    literature: '#FFEEAD',\n    psychology: '#D4A5A5',\n    technology: '#9B59B6',\n    mathematics: '#3498DB',\n    biology: '#2ECC71',\n    physics: '#E74C3C',\n    business: '#FF6B6B'\n  };\n\n  const categories = Object.entries(categoryColors).map(([name, color]) => ({\n    name: name.charAt(0).toUpperCase() + name.slice(1),\n    color\n  }));\n\n  const connectionCount = notes.reduce((total, note) => total + (note.connections?.length || 0), 0);\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Error Loading Graph</h2>\n          <p className=\"text-gray-400 mb-4\">Failed to load the knowledge graph data.</p>\n          <Button onClick={() => window.location.reload()}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative w-full h-screen overflow-hidden bg-gradient-to-br from-gray-900 via-black to-gray-900 flex\">\n      {/* Particle Background */}\n      <div className=\"particle-bg\" />\n      \n      {/* Sidebar */}\n      <div className={`relative z-10 transition-all duration-300 ${sidebarOpen ? 'w-80' : 'w-0'}`}>\n        {sidebarOpen && (\n          <FileExplorer\n            onNoteSelect={setSelectedNote}\n            selectedNote={selectedNote}\n          />\n        )}\n      </div>\n\n      {/* Sidebar Toggle Button - On Divider */}\n      <div className=\"relative z-20\">\n        <Button\n          onClick={() => setSidebarOpen(!sidebarOpen)}\n          className=\"absolute top-1/2 -translate-y-1/2 -left-3 w-6 h-12 bg-gray-800/90 hover:bg-gray-700/90 text-gray-300 border border-gray-600/50 backdrop-blur-sm rounded-r-lg transition-all duration-200\"\n          size=\"sm\"\n        >\n          {sidebarOpen ? <ChevronLeft className=\"w-3 h-3\" /> : <ChevronRight className=\"w-3 h-3\" />}\n        </Button>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 relative\">\n        {/* Loading Overlay */}\n        {(isLoading || isRegenerating) && (\n          <div className=\"absolute inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-2 border-[var(--electric-blue)] border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p className=\"text-[var(--electric-blue)] glowing-text\">\n                {isLoading ? 'Loading Knowledge Graph...' : 'Regenerating Graph...'}\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* 3D Graph */}\n        {!isLoading && notes.length > 0 && (\n          <Graph3D\n            notes={notes}\n            onNodeClick={setSelectedNote}\n            onHomeCameraRef={handleHomeCameraRef}\n            nodeSize={nodeSize}\n            particleSize={particleSize}\n            labelThreshold={labelThreshold}\n            nodeDistance={debouncedNodeDistance}\n          />\n        )}\n\n\n\n        {/* Stats Panel */}\n        <div className={`stats-panel transition-all duration-300 ${sidebarOpen ? 'left-[21rem]' : 'left-4'}`}>\n          <h3 className=\"text-sm font-semibold mb-2 text-[var(--electric-blue)] glowing-text flex items-center gap-2\">\n            <Network className=\"w-4 h-4\" />\n            Knowledge Graph\n          </h3>\n          <div className=\"space-y-1 text-xs\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-300\">Total Notes:</span>\n              <span className=\"text-white font-mono\">{notes.length}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-300\">Connections:</span>\n              <span className=\"text-white font-mono\">{connectionCount}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-300\">Categories:</span>\n              <span className=\"text-white font-mono\">{categories.length}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Category Legend */}\n        <div className=\"category-legend\">\n          <h3 className=\"text-sm font-semibold mb-3 text-[var(--electric-blue)] glowing-text\">Categories</h3>\n          <div className=\"space-y-2\">\n            {categories.map(({ name, color }) => (\n              <div key={name} className=\"flex items-center gap-2\">\n                <div \n                  className=\"w-3 h-3 rounded-full glow-effect\"\n                  style={{ backgroundColor: color }}\n                />\n                <span className=\"text-xs text-gray-300\">{name}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Note Preview */}\n        {selectedNote && (\n          <NotePreview\n            note={selectedNote}\n            onClose={() => setSelectedNote(null)}\n            onNoteSelect={setSelectedNote}\n            initialPosition={noteWindowPosition}\n            initialSize={noteWindowSize}\n            onPositionChange={setNoteWindowPosition}\n            onSizeChange={setNoteWindowSize}\n          />\n        )}\n\n\n\n        {/* Control Panel - Bottom Center of Main Panel */}\n        <div className=\"absolute bottom-6 left-1/2 transform -translate-x-1/2 z-20 flex gap-3 bg-gray-900/80 backdrop-blur-sm border border-gray-700/50 rounded-full px-4 py-2\">\n          <Button\n            onClick={() => {\n              console.log('Home button clicked, homeCameraFn:', homeCameraFn);\n              console.log('Button disabled state:', !homeCameraFn);\n              homeCameraFn && homeCameraFn();\n            }}\n            disabled={!homeCameraFn}\n            size=\"sm\"\n            className={`${homeCameraFn \n              ? 'bg-green-600/20 hover:bg-green-600/30 text-green-400 border border-green-600/50' \n              : 'bg-gray-600/20 text-gray-500 border border-gray-600/50 cursor-not-allowed'\n            } backdrop-blur-sm transition-all duration-200 w-10 h-10 p-0 rounded-full`}\n          >\n            <Home className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            onClick={handleRegenerate}\n            disabled={regenerateMutation.isPending}\n            size=\"sm\"\n            className=\"bg-[var(--electric-blue)]/20 hover:bg-[var(--electric-blue)]/30 text-[var(--electric-blue)] border border-[var(--electric-blue)]/50 backdrop-blur-sm transition-all duration-200 w-10 h-10 p-0 rounded-full\"\n          >\n            <RefreshCw className={`w-4 h-4 ${regenerateMutation.isPending ? 'animate-spin' : ''}`} />\n          </Button>\n          \n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"bg-gray-800/50 hover:bg-gray-700/50 text-gray-300 border-gray-600/50 backdrop-blur-sm w-10 h-10 p-0 rounded-full\"\n              >\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-64 bg-gray-900/95 border-gray-700/50 backdrop-blur-sm\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm text-gray-300\">Node size</label>\n                    <Slider\n                      value={[nodeSize]}\n                      onValueChange={(value) => setNodeSize(value[0])}\n                      max={3}\n                      min={0.5}\n                      step={0.1}\n                      className=\"w-full thin-slider\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm text-gray-300\">Particle size</label>\n                    <Slider\n                      value={[particleSize]}\n                      onValueChange={(value) => setParticleSize(value[0])}\n                      max={3}\n                      min={0.1}\n                      step={0.1}\n                      className=\"w-full thin-slider\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm text-gray-300\">Node distance</label>\n                    <Slider\n                      value={[nodeDistance]}\n                      onValueChange={(value) => setNodeDistance(value[0])}\n                      max={30}\n                      min={5}\n                      step={1}\n                      className=\"w-full thin-slider\"\n                    />\n                    <span className=\"text-xs text-gray-400\">Controls spacing between nodes</span>\n                  </div>\n                </div>\n              </div>\n            </PopoverContent>\n          </Popover>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13033},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/remarkWikiLink.ts":{"content":"import { visit } from 'unist-util-visit';\nimport type { Node } from 'unist';\nimport type { Text, Link } from 'mdast';\n\ninterface WikiLinkNode extends Node {\n  type: 'wikiLink';\n  data: {\n    alias?: string;\n    permalink: string;\n  };\n  children: Text[];\n}\n\n// Custom remark plugin to parse [[]] wiki links\nexport function remarkWikiLink() {\n  return (tree: Node) => {\n    visit(tree, 'text', (node: Text, index: number, parent: any) => {\n      if (!node.value || typeof node.value !== 'string') return;\n\n      const wikiLinkRegex = /\\[\\[([^\\]]+)\\]\\]/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n\n      // Reset the regex state\n      wikiLinkRegex.lastIndex = 0;\n      \n      while ((match = wikiLinkRegex.exec(node.value)) !== null) {\n        // Add text before the link\n        if (match.index > lastIndex) {\n          parts.push({\n            type: 'text',\n            value: node.value.slice(lastIndex, match.index)\n          });\n        }\n\n        // Parse the wiki link content\n        const linkContent = match[1];\n        const [title, alias] = linkContent.includes('|') \n          ? linkContent.split('|', 2).map(s => s.trim())\n          : [linkContent.trim(), linkContent.trim()];\n\n        // Create a standard link node instead of custom wikiLink\n        const wikiLink: Link = {\n          type: 'link',\n          url: `#wiki:${title}`,\n          title: `Wiki link to ${title}`,\n          data: {\n            isWikiLink: true,\n            permalink: title,\n            alias\n          },\n          children: [{\n            type: 'text',\n            value: alias  // Remove the [[ ]] brackets from display\n          }]\n        };\n\n        parts.push(wikiLink);\n        lastIndex = match.index + match[0].length;\n      }\n\n      // Add remaining text\n      if (lastIndex < node.value.length) {\n        parts.push({\n          type: 'text',\n          value: node.value.slice(lastIndex)\n        });\n      }\n\n      // Replace the text node with the parsed parts if we found any wiki links\n      if (parts.length > 0) {\n        parent.children.splice(index, 1, ...parts);\n      }\n    });\n  };\n}","size_bytes":2121},"client/src/lib/remarkImageEmbed.ts":{"content":"import { visit } from 'unist-util-visit';\nimport type { Node } from 'unist';\nimport type { Text } from 'mdast';\n\ninterface ImageEmbedNode extends Node {\n  type: 'imageEmbed';\n  data: {\n    noteTitle: string;\n  };\n  children: Text[];\n}\n\nexport function remarkImageEmbed() {\n  return (tree: Node) => {\n    visit(tree, 'text', (node: Text, index: number, parent: any) => {\n      if (!parent || index === null) return;\n\n      const imageEmbedRegex = /!\\[\\[([^\\]]+)\\]\\]/g;\n      const matches = Array.from(node.value.matchAll(imageEmbedRegex));\n\n      if (matches.length === 0) return;\n\n      const newNodes: (Text | ImageEmbedNode)[] = [];\n      let lastIndex = 0;\n\n      matches.forEach((match) => {\n        const [fullMatch, noteTitle] = match;\n        const startIndex = match.index!;\n\n        // Add text before the match\n        if (startIndex > lastIndex) {\n          newNodes.push({\n            type: 'text',\n            value: node.value.slice(lastIndex, startIndex),\n          });\n        }\n\n        // Only process files that look like direct image references with extensions\n        // but haven't been processed by noteEmbed (this runs after noteEmbed now)\n        const trimmedTitle = noteTitle.trim();\n        const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.webp', '.svg'];\n        const hasImageExtension = imageExtensions.some(ext => trimmedTitle.toLowerCase().endsWith(ext));\n\n        if (hasImageExtension) {\n          // Add the image embed node for direct image references\n          const imageEmbed: ImageEmbedNode = {\n            type: 'imageEmbed',\n            data: {\n              noteTitle: trimmedTitle,\n            },\n            children: [{\n              type: 'text',\n              value: noteTitle,\n            }],\n          };\n          newNodes.push(imageEmbed);\n        } else {\n          // Not an image file, keep as regular text\n          newNodes.push({\n            type: 'text',\n            value: fullMatch,\n          });\n        }\n\n        lastIndex = startIndex + fullMatch.length;\n      });\n\n      // Add remaining text\n      if (lastIndex < node.value.length) {\n        newNodes.push({\n          type: 'text',\n          value: node.value.slice(lastIndex),\n        });\n      }\n\n      // Replace the current node with new nodes\n      parent.children.splice(index, 1, ...newNodes);\n    });\n  };\n}","size_bytes":2346}}}